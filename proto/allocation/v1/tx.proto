syntax = "proto3";
package allocation.v1;

import "allocation/v1/allocation.proto";

option go_package = "github.com/peggyjv/sommelier/x/allocation/types";

// MsgService defines the messages the allocation module handles
service Msg {
  // DelegateDecisions creates an index in the store linking the validator and the delegate key
  // need to be able to query both the delegate and the validator given the other one
  rpc DelegateDecisions (MsgDelegateDecisions) returns (MsgDelegateDecisionsResponse);
  // DecisionPrecommit stores the precommit hash indexed by validator address
  rpc DecisionPrecommit (MsgDecisionPrecommit) returns (MsgDecisionPrecommitResponse);
  // DecisionCommit checks the precommit hash against the data, rejects the message if it doesn't match
  // then records the commitment in the store indexed by validator address
  rpc DecisionCommit    (MsgDecisionCommit)    returns (MsgDecisionCommitResponse);
}

// MsgDelegateDecisionsRequest is the request type for DelegateDecisions
message MsgDelegateDecisions {
  string delegate = 1;
  string validator = 2;
}

// MsgDelegateDecisionsResponse is the response type for DelegateDecisions
message MsgDelegateDecisionsResponse {}

// MsgDecisionPrecommitRequest is the request type for DecisionPrecommit
message MsgDecisionPrecommit {
  DecisionPrecommit precommit = 1;
  string signer = 2;
}

// MsgDecisionPrecommitResponse is the response type for MsgDecisionPrecommit
message MsgDecisionPrecommitResponse {}

// MsgDecisionCommitRequest is the request type for DecisionCommit
message MsgDecisionCommit {
  repeated Decision decisions = 1;
  string            salt = 2;
  string            signer = 3;
}

// MsgDecisionCommitResponse is the response type for the Msg/DecisionCommit gRPC method.
message MsgDecisionCommitResponse {}