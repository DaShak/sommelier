// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reinvest/v1/reinvest.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Reinvest is a vote by a validator to reinvest a particular
// cellars rewards
type ReinvestVote struct {
	Cellar []*Cellar `protobuf:"bytes,1,rep,name=cellar,proto3" json:"cellar,omitempty"`
}

func (m *ReinvestVote) Reset()         { *m = ReinvestVote{} }
func (m *ReinvestVote) String() string { return proto.CompactTextString(m) }
func (*ReinvestVote) ProtoMessage()    {}
func (*ReinvestVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_5447d92ac848108b, []int{0}
}
func (m *ReinvestVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReinvestVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReinvestVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReinvestVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReinvestVote.Merge(m, src)
}
func (m *ReinvestVote) XXX_Size() int {
	return m.Size()
}
func (m *ReinvestVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ReinvestVote.DiscardUnknown(m)
}

var xxx_messageInfo_ReinvestVote proto.InternalMessageInfo

func (m *ReinvestVote) GetCellar() []*Cellar {
	if m != nil {
		return m.Cellar
	}
	return nil
}

// Cellar is a managed contract with a reinvest function
type Cellar struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Cellar) Reset()         { *m = Cellar{} }
func (m *Cellar) String() string { return proto.CompactTextString(m) }
func (*Cellar) ProtoMessage()    {}
func (*Cellar) Descriptor() ([]byte, []int) {
	return fileDescriptor_5447d92ac848108b, []int{1}
}
func (m *Cellar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cellar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cellar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cellar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cellar.Merge(m, src)
}
func (m *Cellar) XXX_Size() int {
	return m.Size()
}
func (m *Cellar) XXX_DiscardUnknown() {
	xxx_messageInfo_Cellar.DiscardUnknown(m)
}

var xxx_messageInfo_Cellar proto.InternalMessageInfo

func (m *Cellar) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// CellarUpdate is a struct for the ContractCallTx
type CellarUpdate struct {
	InvalidationNonce uint64  `protobuf:"varint,1,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	Cellar            *Cellar `protobuf:"bytes,2,opt,name=cellar,proto3" json:"cellar,omitempty"`
}

func (m *CellarUpdate) Reset()         { *m = CellarUpdate{} }
func (m *CellarUpdate) String() string { return proto.CompactTextString(m) }
func (*CellarUpdate) ProtoMessage()    {}
func (*CellarUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5447d92ac848108b, []int{2}
}
func (m *CellarUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellarUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellarUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellarUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellarUpdate.Merge(m, src)
}
func (m *CellarUpdate) XXX_Size() int {
	return m.Size()
}
func (m *CellarUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_CellarUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_CellarUpdate proto.InternalMessageInfo

func (m *CellarUpdate) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *CellarUpdate) GetCellar() *Cellar {
	if m != nil {
		return m.Cellar
	}
	return nil
}

type AddManagedCellarsProposal struct {
	Title       string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CellarIds   []string `protobuf:"bytes,3,rep,name=cellar_ids,json=cellarIds,proto3" json:"cellar_ids,omitempty"`
}

func (m *AddManagedCellarsProposal) Reset()         { *m = AddManagedCellarsProposal{} }
func (m *AddManagedCellarsProposal) String() string { return proto.CompactTextString(m) }
func (*AddManagedCellarsProposal) ProtoMessage()    {}
func (*AddManagedCellarsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_5447d92ac848108b, []int{3}
}
func (m *AddManagedCellarsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddManagedCellarsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddManagedCellarsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddManagedCellarsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddManagedCellarsProposal.Merge(m, src)
}
func (m *AddManagedCellarsProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddManagedCellarsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddManagedCellarsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddManagedCellarsProposal proto.InternalMessageInfo

func (m *AddManagedCellarsProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddManagedCellarsProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddManagedCellarsProposal) GetCellarIds() []string {
	if m != nil {
		return m.CellarIds
	}
	return nil
}

type RemoveManagedCellarsProposal struct {
	Title       string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CellarIds   []string `protobuf:"bytes,3,rep,name=cellar_ids,json=cellarIds,proto3" json:"cellar_ids,omitempty"`
}

func (m *RemoveManagedCellarsProposal) Reset()         { *m = RemoveManagedCellarsProposal{} }
func (m *RemoveManagedCellarsProposal) String() string { return proto.CompactTextString(m) }
func (*RemoveManagedCellarsProposal) ProtoMessage()    {}
func (*RemoveManagedCellarsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_5447d92ac848108b, []int{4}
}
func (m *RemoveManagedCellarsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveManagedCellarsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveManagedCellarsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveManagedCellarsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveManagedCellarsProposal.Merge(m, src)
}
func (m *RemoveManagedCellarsProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveManagedCellarsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveManagedCellarsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveManagedCellarsProposal proto.InternalMessageInfo

func (m *RemoveManagedCellarsProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RemoveManagedCellarsProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RemoveManagedCellarsProposal) GetCellarIds() []string {
	if m != nil {
		return m.CellarIds
	}
	return nil
}

func init() {
	proto.RegisterType((*ReinvestVote)(nil), "reinvest.v1.ReinvestVote")
	proto.RegisterType((*Cellar)(nil), "reinvest.v1.Cellar")
	proto.RegisterType((*CellarUpdate)(nil), "reinvest.v1.CellarUpdate")
	proto.RegisterType((*AddManagedCellarsProposal)(nil), "reinvest.v1.AddManagedCellarsProposal")
	proto.RegisterType((*RemoveManagedCellarsProposal)(nil), "reinvest.v1.RemoveManagedCellarsProposal")
}

func init() { proto.RegisterFile("reinvest/v1/reinvest.proto", fileDescriptor_5447d92ac848108b) }

var fileDescriptor_5447d92ac848108b = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0x31, 0x4b, 0xfb, 0x40,
	0x18, 0xc6, 0x7b, 0xed, 0xff, 0x5f, 0xc8, 0xdb, 0x22, 0x78, 0x3a, 0x44, 0xd1, 0x10, 0x32, 0x15,
	0xa4, 0x09, 0xd5, 0xd1, 0x49, 0x1d, 0xc4, 0x41, 0x91, 0x03, 0x1d, 0x5c, 0xca, 0x35, 0xf7, 0x12,
	0xaf, 0x24, 0xb9, 0x70, 0x77, 0x0d, 0xf6, 0x5b, 0xf8, 0xb1, 0x1c, 0x3b, 0x3a, 0x4a, 0xfb, 0x45,
	0xa4, 0x49, 0x2c, 0xd9, 0xdc, 0xdc, 0xee, 0x79, 0x7e, 0x0f, 0xf7, 0x3c, 0xc3, 0x0b, 0xc7, 0x1a,
	0x65, 0x5e, 0xa2, 0xb1, 0x51, 0x39, 0x89, 0x7e, 0xde, 0x61, 0xa1, 0x95, 0x55, 0x74, 0xb0, 0xd3,
	0xe5, 0x24, 0xb8, 0x84, 0x21, 0x6b, 0xe4, 0xb3, 0xb2, 0x48, 0xcf, 0xa0, 0x1f, 0x63, 0x9a, 0x72,
	0xed, 0x12, 0xbf, 0x37, 0x1a, 0x9c, 0x1f, 0x84, 0xad, 0x74, 0x78, 0x53, 0x21, 0xd6, 0x44, 0x02,
	0x17, 0xfa, 0xb5, 0x43, 0xf7, 0xa0, 0x2b, 0x85, 0x4b, 0x7c, 0x32, 0x72, 0x58, 0x57, 0x8a, 0x60,
	0x0e, 0xc3, 0x9a, 0x3c, 0x15, 0x82, 0x5b, 0xa4, 0x63, 0xa0, 0x32, 0x2f, 0x79, 0x2a, 0x05, 0xb7,
	0x52, 0xe5, 0xd3, 0x5c, 0xe5, 0x31, 0x56, 0xf9, 0x7f, 0x6c, 0xbf, 0x4d, 0x1e, 0xb6, 0xa0, 0xb5,
	0xa2, 0xeb, 0x93, 0xdf, 0x56, 0x68, 0x38, 0xba, 0x12, 0xe2, 0x9e, 0xe7, 0x3c, 0x41, 0x51, 0x33,
	0xf3, 0xa8, 0x55, 0xa1, 0x0c, 0x4f, 0xe9, 0x21, 0xfc, 0xb7, 0xd2, 0xa6, 0xd8, 0x6c, 0xab, 0x05,
	0xf5, 0x61, 0x20, 0xd0, 0xc4, 0x5a, 0x16, 0xdb, 0xce, 0xaa, 0xc4, 0x61, 0x6d, 0x8b, 0x9e, 0x02,
	0xd4, 0xdf, 0x4f, 0xa5, 0x30, 0x6e, 0xcf, 0xef, 0x8d, 0x1c, 0xe6, 0xd4, 0xce, 0x9d, 0x30, 0xc1,
	0x02, 0x4e, 0x18, 0x66, 0xaa, 0xc4, 0x3f, 0xad, 0xbd, 0xbe, 0xfd, 0x58, 0x7b, 0x64, 0xb5, 0xf6,
	0xc8, 0xd7, 0xda, 0x23, 0xef, 0x1b, 0xaf, 0xb3, 0xda, 0x78, 0x9d, 0xcf, 0x8d, 0xd7, 0x79, 0x19,
	0x27, 0xd2, 0xbe, 0x2e, 0x66, 0x61, 0xac, 0xb2, 0xa8, 0xc0, 0x24, 0x59, 0xce, 0xcb, 0xc8, 0xa8,
	0x2c, 0xc3, 0x54, 0xa2, 0x8e, 0xde, 0x76, 0x37, 0x10, 0xd9, 0x65, 0x81, 0x66, 0xd6, 0xaf, 0x4e,
	0xe1, 0xe2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x11, 0x82, 0xd2, 0x28, 0x02, 0x00, 0x00,
}

func (m *ReinvestVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReinvestVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReinvestVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cellar) > 0 {
		for iNdEx := len(m.Cellar) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cellar[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReinvest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Cellar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cellar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cellar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReinvest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CellarUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellarUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellarUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cellar != nil {
		{
			size, err := m.Cellar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReinvest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintReinvest(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddManagedCellarsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddManagedCellarsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddManagedCellarsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CellarIds) > 0 {
		for iNdEx := len(m.CellarIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CellarIds[iNdEx])
			copy(dAtA[i:], m.CellarIds[iNdEx])
			i = encodeVarintReinvest(dAtA, i, uint64(len(m.CellarIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReinvest(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintReinvest(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveManagedCellarsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveManagedCellarsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveManagedCellarsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CellarIds) > 0 {
		for iNdEx := len(m.CellarIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CellarIds[iNdEx])
			copy(dAtA[i:], m.CellarIds[iNdEx])
			i = encodeVarintReinvest(dAtA, i, uint64(len(m.CellarIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReinvest(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintReinvest(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReinvest(dAtA []byte, offset int, v uint64) int {
	offset -= sovReinvest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReinvestVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cellar) > 0 {
		for _, e := range m.Cellar {
			l = e.Size()
			n += 1 + l + sovReinvest(uint64(l))
		}
	}
	return n
}

func (m *Cellar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReinvest(uint64(l))
	}
	return n
}

func (m *CellarUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvalidationNonce != 0 {
		n += 1 + sovReinvest(uint64(m.InvalidationNonce))
	}
	if m.Cellar != nil {
		l = m.Cellar.Size()
		n += 1 + l + sovReinvest(uint64(l))
	}
	return n
}

func (m *AddManagedCellarsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovReinvest(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReinvest(uint64(l))
	}
	if len(m.CellarIds) > 0 {
		for _, s := range m.CellarIds {
			l = len(s)
			n += 1 + l + sovReinvest(uint64(l))
		}
	}
	return n
}

func (m *RemoveManagedCellarsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovReinvest(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReinvest(uint64(l))
	}
	if len(m.CellarIds) > 0 {
		for _, s := range m.CellarIds {
			l = len(s)
			n += 1 + l + sovReinvest(uint64(l))
		}
	}
	return n
}

func sovReinvest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReinvest(x uint64) (n int) {
	return sovReinvest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReinvestVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReinvest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReinvestVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReinvestVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cellar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReinvest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReinvest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cellar = append(m.Cellar, &Cellar{})
			if err := m.Cellar[len(m.Cellar)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReinvest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReinvest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cellar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReinvest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cellar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cellar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReinvest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReinvest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReinvest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReinvest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellarUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReinvest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellarUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellarUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cellar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReinvest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReinvest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cellar == nil {
				m.Cellar = &Cellar{}
			}
			if err := m.Cellar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReinvest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReinvest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddManagedCellarsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReinvest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddManagedCellarsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddManagedCellarsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReinvest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReinvest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReinvest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReinvest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReinvest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReinvest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellarIds = append(m.CellarIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReinvest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReinvest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveManagedCellarsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReinvest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveManagedCellarsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveManagedCellarsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReinvest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReinvest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReinvest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReinvest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReinvest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReinvest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellarIds = append(m.CellarIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReinvest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReinvest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReinvest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReinvest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReinvest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReinvest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReinvest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReinvest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReinvest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReinvest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReinvest = fmt.Errorf("proto: unexpected end of group")
)
