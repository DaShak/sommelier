// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reinvest/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params gRPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b7772b7391d1b92, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsRequest is the response type for the Query/Params gRPC method.
type QueryParamsResponse struct {
	// reinvest parameters
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b7772b7391d1b92, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryReinvestVotesRequest is the request type for the Query/reinvestPrecommits gRPC method.
type QueryReinvestVotesRequest struct {
}

func (m *QueryReinvestVotesRequest) Reset()         { *m = QueryReinvestVotesRequest{} }
func (m *QueryReinvestVotesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReinvestVotesRequest) ProtoMessage()    {}
func (*QueryReinvestVotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b7772b7391d1b92, []int{2}
}
func (m *QueryReinvestVotesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReinvestVotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReinvestVotesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReinvestVotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReinvestVotesRequest.Merge(m, src)
}
func (m *QueryReinvestVotesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReinvestVotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReinvestVotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReinvestVotesRequest proto.InternalMessageInfo

// QueryreinvestPrecommitResponse is the response type for the Query/reinvestPrecommits gRPC method.
type QueryReinvestVotesResponse struct {
	// prevote submitted within the latest voting period
	ReinvestVotes []*ReinvestVote `protobuf:"bytes,1,rep,name=reinvest_votes,json=reinvestVotes,proto3" json:"reinvest_votes,omitempty"`
}

func (m *QueryReinvestVotesResponse) Reset()         { *m = QueryReinvestVotesResponse{} }
func (m *QueryReinvestVotesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReinvestVotesResponse) ProtoMessage()    {}
func (*QueryReinvestVotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b7772b7391d1b92, []int{3}
}
func (m *QueryReinvestVotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReinvestVotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReinvestVotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReinvestVotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReinvestVotesResponse.Merge(m, src)
}
func (m *QueryReinvestVotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReinvestVotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReinvestVotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReinvestVotesResponse proto.InternalMessageInfo

func (m *QueryReinvestVotesResponse) GetReinvestVotes() []*ReinvestVote {
	if m != nil {
		return m.ReinvestVotes
	}
	return nil
}

// QueryReinvestVoteRequest is the request type for the Query/QueryreinvestDataVote gRPC method.
type QueryReinvestVoteRequest struct {
	// validator operator address
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// cellar contract address
	Cellar string `protobuf:"bytes,2,opt,name=cellar,proto3" json:"cellar,omitempty"`
}

func (m *QueryReinvestVoteRequest) Reset()         { *m = QueryReinvestVoteRequest{} }
func (m *QueryReinvestVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReinvestVoteRequest) ProtoMessage()    {}
func (*QueryReinvestVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b7772b7391d1b92, []int{4}
}
func (m *QueryReinvestVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReinvestVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReinvestVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReinvestVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReinvestVoteRequest.Merge(m, src)
}
func (m *QueryReinvestVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReinvestVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReinvestVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReinvestVoteRequest proto.InternalMessageInfo

func (m *QueryReinvestVoteRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *QueryReinvestVoteRequest) GetCellar() string {
	if m != nil {
		return m.Cellar
	}
	return ""
}

// QueryReinvestVoteResponse is the response type for the Query/QueryreinvestDataVote gRPC method.
type QueryReinvestVoteResponse struct {
	// vote containing the reinvest feed submitted within the latest voting period
	ReinvestVote *ReinvestVote `protobuf:"bytes,1,opt,name=reinvest_vote,json=reinvestVote,proto3" json:"reinvest_vote,omitempty"`
}

func (m *QueryReinvestVoteResponse) Reset()         { *m = QueryReinvestVoteResponse{} }
func (m *QueryReinvestVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReinvestVoteResponse) ProtoMessage()    {}
func (*QueryReinvestVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b7772b7391d1b92, []int{5}
}
func (m *QueryReinvestVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReinvestVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReinvestVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReinvestVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReinvestVoteResponse.Merge(m, src)
}
func (m *QueryReinvestVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReinvestVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReinvestVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReinvestVoteResponse proto.InternalMessageInfo

func (m *QueryReinvestVoteResponse) GetReinvestVote() *ReinvestVote {
	if m != nil {
		return m.ReinvestVote
	}
	return nil
}

// QueryVotePeriodRequest is the request type for the Query/QueryCommitPeriod gRPC method.
type QueryVotePeriodRequest struct {
}

func (m *QueryVotePeriodRequest) Reset()         { *m = QueryVotePeriodRequest{} }
func (m *QueryVotePeriodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVotePeriodRequest) ProtoMessage()    {}
func (*QueryVotePeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b7772b7391d1b92, []int{6}
}
func (m *QueryVotePeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotePeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotePeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotePeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotePeriodRequest.Merge(m, src)
}
func (m *QueryVotePeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotePeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotePeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotePeriodRequest proto.InternalMessageInfo

// QueryVotePeriodResponse is the response type for the Query/QueryVotePeriod gRPC method.
type QueryVotePeriodResponse struct {
	// block height at which the query was processed
	CurrentHeight int64 `protobuf:"varint,1,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
	// latest vote period start block height
	VotePeriodStart int64 `protobuf:"varint,2,opt,name=vote_period_start,json=votePeriodStart,proto3" json:"vote_period_start,omitempty"`
	// block height at which the current voting period ends
	VotePeriodEnd int64 `protobuf:"varint,3,opt,name=vote_period_end,json=votePeriodEnd,proto3" json:"vote_period_end,omitempty"`
}

func (m *QueryVotePeriodResponse) Reset()         { *m = QueryVotePeriodResponse{} }
func (m *QueryVotePeriodResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVotePeriodResponse) ProtoMessage()    {}
func (*QueryVotePeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b7772b7391d1b92, []int{7}
}
func (m *QueryVotePeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotePeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotePeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotePeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotePeriodResponse.Merge(m, src)
}
func (m *QueryVotePeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotePeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotePeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotePeriodResponse proto.InternalMessageInfo

func (m *QueryVotePeriodResponse) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *QueryVotePeriodResponse) GetVotePeriodStart() int64 {
	if m != nil {
		return m.VotePeriodStart
	}
	return 0
}

func (m *QueryVotePeriodResponse) GetVotePeriodEnd() int64 {
	if m != nil {
		return m.VotePeriodEnd
	}
	return 0
}

// QueryCellarsRequest is the request type for Query/QueryCellars gRPC method.
type QueryCellarsRequest struct {
}

func (m *QueryCellarsRequest) Reset()         { *m = QueryCellarsRequest{} }
func (m *QueryCellarsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCellarsRequest) ProtoMessage()    {}
func (*QueryCellarsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b7772b7391d1b92, []int{8}
}
func (m *QueryCellarsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCellarsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCellarsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCellarsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCellarsRequest.Merge(m, src)
}
func (m *QueryCellarsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCellarsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCellarsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCellarsRequest proto.InternalMessageInfo

// QueryCellarsResponse is the response type for Query/QueryCellars gRPC method.
type QueryCellarsResponse struct {
	Cellars []*Cellar `protobuf:"bytes,1,rep,name=cellars,proto3" json:"cellars,omitempty"`
}

func (m *QueryCellarsResponse) Reset()         { *m = QueryCellarsResponse{} }
func (m *QueryCellarsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCellarsResponse) ProtoMessage()    {}
func (*QueryCellarsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b7772b7391d1b92, []int{9}
}
func (m *QueryCellarsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCellarsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCellarsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCellarsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCellarsResponse.Merge(m, src)
}
func (m *QueryCellarsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCellarsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCellarsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCellarsResponse proto.InternalMessageInfo

func (m *QueryCellarsResponse) GetCellars() []*Cellar {
	if m != nil {
		return m.Cellars
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "reinvest.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "reinvest.v1.QueryParamsResponse")
	proto.RegisterType((*QueryReinvestVotesRequest)(nil), "reinvest.v1.QueryReinvestVotesRequest")
	proto.RegisterType((*QueryReinvestVotesResponse)(nil), "reinvest.v1.QueryReinvestVotesResponse")
	proto.RegisterType((*QueryReinvestVoteRequest)(nil), "reinvest.v1.QueryReinvestVoteRequest")
	proto.RegisterType((*QueryReinvestVoteResponse)(nil), "reinvest.v1.QueryReinvestVoteResponse")
	proto.RegisterType((*QueryVotePeriodRequest)(nil), "reinvest.v1.QueryVotePeriodRequest")
	proto.RegisterType((*QueryVotePeriodResponse)(nil), "reinvest.v1.QueryVotePeriodResponse")
	proto.RegisterType((*QueryCellarsRequest)(nil), "reinvest.v1.QueryCellarsRequest")
	proto.RegisterType((*QueryCellarsResponse)(nil), "reinvest.v1.QueryCellarsResponse")
}

func init() { proto.RegisterFile("reinvest/v1/query.proto", fileDescriptor_3b7772b7391d1b92) }

var fileDescriptor_3b7772b7391d1b92 = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xee, 0xd2, 0x1f, 0xfc, 0xc2, 0x94, 0x3f, 0x61, 0x40, 0x28, 0x2b, 0x2e, 0x75, 0xa5, 0x85,
	0x90, 0xd0, 0x49, 0xf1, 0x66, 0x8c, 0x31, 0x18, 0x22, 0x47, 0x5c, 0x13, 0x0f, 0x9a, 0xd8, 0x4c,
	0xdb, 0xc9, 0xb2, 0xa6, 0xdd, 0x59, 0x66, 0xa6, 0xab, 0x84, 0x70, 0xf1, 0xe4, 0xd1, 0x44, 0xfd,
	0x0a, 0x7e, 0x16, 0xbc, 0x91, 0x78, 0xf1, 0x64, 0x0c, 0xf8, 0x41, 0x4c, 0x67, 0x66, 0x97, 0x59,
	0xb7, 0x2d, 0xde, 0x76, 0xde, 0xf7, 0x99, 0xe7, 0x79, 0xde, 0x99, 0x67, 0x16, 0xac, 0x30, 0x12,
	0x84, 0x31, 0xe1, 0x02, 0xc5, 0x0d, 0x74, 0xdc, 0x27, 0xec, 0xa4, 0x1e, 0x31, 0x2a, 0x28, 0x2c,
	0x25, 0x8d, 0x7a, 0xdc, 0xb0, 0x97, 0x7c, 0xea, 0x53, 0x59, 0x47, 0x83, 0x2f, 0x05, 0xb1, 0xd7,
	0x7c, 0x4a, 0xfd, 0x2e, 0x41, 0x38, 0x0a, 0x10, 0x0e, 0x43, 0x2a, 0xb0, 0x08, 0x68, 0xc8, 0x75,
	0x77, 0xd5, 0x64, 0xf6, 0x49, 0x48, 0x78, 0x90, 0xb4, 0x6c, 0xb3, 0x95, 0xea, 0xe8, 0x6d, 0x6d,
	0xca, 0x7b, 0x94, 0x37, 0x95, 0x9a, 0x5a, 0xe8, 0xd6, 0xb6, 0x5a, 0xa1, 0x16, 0xe6, 0x44, 0x79,
	0x45, 0x71, 0xa3, 0x45, 0x04, 0x6e, 0xa0, 0x08, 0xfb, 0x41, 0x28, 0xe5, 0x15, 0xd6, 0x5d, 0x02,
	0xf0, 0xd9, 0x00, 0x71, 0x88, 0x19, 0xee, 0x71, 0x8f, 0x1c, 0xf7, 0x09, 0x17, 0xee, 0x01, 0x58,
	0xcc, 0x54, 0x79, 0x44, 0x43, 0x4e, 0x60, 0x03, 0x4c, 0x45, 0xb2, 0x52, 0xb6, 0x2a, 0xd6, 0x56,
	0x69, 0x77, 0xb1, 0x6e, 0x0c, 0x5f, 0x57, 0xe0, 0xbd, 0xff, 0xce, 0x7f, 0xae, 0x17, 0x3c, 0x0d,
	0x74, 0x6f, 0x83, 0x55, 0xc9, 0xe4, 0x69, 0xe0, 0x0b, 0x2a, 0x48, 0x2a, 0xf3, 0x1a, 0xd8, 0xc3,
	0x9a, 0x5a, 0xed, 0x31, 0x98, 0x4b, 0xe8, 0x9b, 0xf1, 0xa0, 0x53, 0xb6, 0x2a, 0xc5, 0xad, 0xd2,
	0xee, 0x6a, 0x46, 0xd5, 0xdc, 0xeb, 0xcd, 0x32, 0x93, 0xc9, 0x3d, 0x04, 0xe5, 0x1c, 0xbf, 0xd6,
	0x86, 0x6b, 0x60, 0x3a, 0xc6, 0xdd, 0xa0, 0x83, 0x05, 0x65, 0x72, 0x9c, 0x69, 0xef, 0xba, 0x00,
	0x97, 0xc1, 0x54, 0x9b, 0x74, 0xbb, 0x98, 0x95, 0x27, 0x64, 0x4b, 0xaf, 0xdc, 0x57, 0x43, 0xc6,
	0x49, 0x0d, 0x3f, 0x02, 0xb3, 0x19, 0xc3, 0xfa, 0x94, 0xc6, 0xf8, 0x9d, 0x31, 0xfd, 0xba, 0x65,
	0xb0, 0x2c, 0xc9, 0x07, 0x8b, 0x43, 0xc2, 0x02, 0xda, 0x49, 0x0e, 0xea, 0xb3, 0x05, 0x56, 0x72,
	0x2d, 0xad, 0x5a, 0x05, 0x73, 0xed, 0x3e, 0x63, 0x24, 0x14, 0xcd, 0x23, 0x12, 0xf8, 0x47, 0x42,
	0xca, 0x16, 0xbd, 0x59, 0x5d, 0x3d, 0x90, 0x45, 0xb8, 0x0d, 0x16, 0x06, 0x9e, 0x9a, 0x91, 0xdc,
	0xdd, 0xe4, 0x02, 0x33, 0x21, 0x87, 0x2b, 0x7a, 0xf3, 0x71, 0xca, 0xfa, 0x7c, 0x50, 0x86, 0x35,
	0x30, 0x6f, 0x62, 0x49, 0xd8, 0x29, 0x17, 0x15, 0xe7, 0x35, 0x72, 0x3f, 0xec, 0xb8, 0xb7, 0x74,
	0x4c, 0x9e, 0xc8, 0xc3, 0x49, 0xaf, 0x75, 0x1f, 0x2c, 0x65, 0xcb, 0xda, 0xe9, 0x0e, 0xf8, 0x5f,
	0x1d, 0x63, 0x72, 0x93, 0xd9, 0xfc, 0x28, 0xb8, 0x97, 0x60, 0x76, 0xbf, 0x4d, 0x82, 0x49, 0xc9,
	0x03, 0xdf, 0x82, 0x92, 0x11, 0x47, 0xb8, 0x9e, 0xd9, 0x96, 0x8f, 0xaf, 0x5d, 0x19, 0x0d, 0x50,
	0x56, 0xdc, 0xea, 0xfb, 0xef, 0xbf, 0x3f, 0x4d, 0xac, 0xc3, 0x3b, 0x88, 0xd3, 0x5e, 0x8f, 0x74,
	0x03, 0xc2, 0x90, 0xf9, 0xd8, 0x54, 0x7a, 0xe1, 0x17, 0x4b, 0x4f, 0xe8, 0x91, 0xd8, 0x08, 0x16,
	0xac, 0xe5, 0x05, 0x86, 0x05, 0xdc, 0xde, 0xbc, 0x11, 0xa7, 0xfd, 0xec, 0x48, 0x3f, 0x9b, 0xb0,
	0x3a, 0xc2, 0x4f, 0xf6, 0x21, 0xc0, 0xaf, 0x16, 0x58, 0xc8, 0xb1, 0xc1, 0xea, 0x78, 0xb5, 0xc4,
	0x54, 0xed, 0x26, 0x98, 0xf6, 0xb4, 0x27, 0x3d, 0x3d, 0x84, 0x0f, 0xfe, 0xc9, 0x13, 0x3a, 0x4d,
	0x5f, 0xcf, 0x19, 0x3a, 0x55, 0x77, 0x78, 0x06, 0x3f, 0x58, 0x60, 0xfe, 0xaf, 0xe0, 0xc2, 0x7b,
	0x79, 0xfd, 0x5c, 0xe2, 0xed, 0x8d, 0xf1, 0x20, 0x6d, 0x71, 0x5b, 0x5a, 0xdc, 0x80, 0xee, 0x08,
	0x8b, 0x46, 0x8a, 0xe1, 0x29, 0x98, 0x31, 0x53, 0x09, 0x87, 0x84, 0x24, 0x9b, 0x63, 0xfb, 0xee,
	0x18, 0x84, 0x36, 0x50, 0x93, 0x06, 0x2a, 0xd0, 0x19, 0x61, 0x40, 0x67, 0x79, 0xef, 0xe9, 0xf9,
	0xa5, 0x63, 0x5d, 0x5c, 0x3a, 0xd6, 0xaf, 0x4b, 0xc7, 0xfa, 0x78, 0xe5, 0x14, 0x2e, 0xae, 0x9c,
	0xc2, 0x8f, 0x2b, 0xa7, 0xf0, 0x72, 0xc7, 0x0f, 0xc4, 0x51, 0xbf, 0x55, 0x6f, 0xd3, 0x1e, 0x8a,
	0x88, 0xef, 0x9f, 0xbc, 0x89, 0x0d, 0xae, 0x77, 0xd7, 0x6c, 0xe2, 0x24, 0x22, 0xbc, 0x35, 0x25,
	0x7f, 0xdb, 0xf7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x76, 0x37, 0x67, 0xfe, 0x90, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// QueryParams queries the reinvest module parameters.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// QueryRevinvestVotes queries all reinvest precommits in the voting period
	QueryRevinvestVotes(ctx context.Context, in *QueryReinvestVotesRequest, opts ...grpc.CallOption) (*QueryReinvestVotesResponse, error)
	// QueryReinvestVote queries the validator vote in the current voting period
	QueryReinvestVote(ctx context.Context, in *QueryReinvestVoteRequest, opts ...grpc.CallOption) (*QueryReinvestVoteResponse, error)
	// QueryVotePeriod queries the voting period details
	QueryVotePeriod(ctx context.Context, in *QueryVotePeriodRequest, opts ...grpc.CallOption) (*QueryVotePeriodResponse, error)
	// QueryCellars returns all cellars and current tick ranges
	QueryCellars(ctx context.Context, in *QueryCellarsRequest, opts ...grpc.CallOption) (*QueryCellarsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/reinvest.v1.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRevinvestVotes(ctx context.Context, in *QueryReinvestVotesRequest, opts ...grpc.CallOption) (*QueryReinvestVotesResponse, error) {
	out := new(QueryReinvestVotesResponse)
	err := c.cc.Invoke(ctx, "/reinvest.v1.Query/QueryRevinvestVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryReinvestVote(ctx context.Context, in *QueryReinvestVoteRequest, opts ...grpc.CallOption) (*QueryReinvestVoteResponse, error) {
	out := new(QueryReinvestVoteResponse)
	err := c.cc.Invoke(ctx, "/reinvest.v1.Query/QueryReinvestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVotePeriod(ctx context.Context, in *QueryVotePeriodRequest, opts ...grpc.CallOption) (*QueryVotePeriodResponse, error) {
	out := new(QueryVotePeriodResponse)
	err := c.cc.Invoke(ctx, "/reinvest.v1.Query/QueryVotePeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCellars(ctx context.Context, in *QueryCellarsRequest, opts ...grpc.CallOption) (*QueryCellarsResponse, error) {
	out := new(QueryCellarsResponse)
	err := c.cc.Invoke(ctx, "/reinvest.v1.Query/QueryCellars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// QueryParams queries the reinvest module parameters.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// QueryRevinvestVotes queries all reinvest precommits in the voting period
	QueryRevinvestVotes(context.Context, *QueryReinvestVotesRequest) (*QueryReinvestVotesResponse, error)
	// QueryReinvestVote queries the validator vote in the current voting period
	QueryReinvestVote(context.Context, *QueryReinvestVoteRequest) (*QueryReinvestVoteResponse, error)
	// QueryVotePeriod queries the voting period details
	QueryVotePeriod(context.Context, *QueryVotePeriodRequest) (*QueryVotePeriodResponse, error)
	// QueryCellars returns all cellars and current tick ranges
	QueryCellars(context.Context, *QueryCellarsRequest) (*QueryCellarsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryRevinvestVotes(ctx context.Context, req *QueryReinvestVotesRequest) (*QueryReinvestVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRevinvestVotes not implemented")
}
func (*UnimplementedQueryServer) QueryReinvestVote(ctx context.Context, req *QueryReinvestVoteRequest) (*QueryReinvestVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryReinvestVote not implemented")
}
func (*UnimplementedQueryServer) QueryVotePeriod(ctx context.Context, req *QueryVotePeriodRequest) (*QueryVotePeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVotePeriod not implemented")
}
func (*UnimplementedQueryServer) QueryCellars(ctx context.Context, req *QueryCellarsRequest) (*QueryCellarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCellars not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reinvest.v1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRevinvestVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReinvestVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRevinvestVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reinvest.v1.Query/QueryRevinvestVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRevinvestVotes(ctx, req.(*QueryReinvestVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryReinvestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReinvestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryReinvestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reinvest.v1.Query/QueryReinvestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryReinvestVote(ctx, req.(*QueryReinvestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVotePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVotePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reinvest.v1.Query/QueryVotePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVotePeriod(ctx, req.(*QueryVotePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCellars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCellarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCellars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reinvest.v1.Query/QueryCellars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCellars(ctx, req.(*QueryCellarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reinvest.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryRevinvestVotes",
			Handler:    _Query_QueryRevinvestVotes_Handler,
		},
		{
			MethodName: "QueryReinvestVote",
			Handler:    _Query_QueryReinvestVote_Handler,
		},
		{
			MethodName: "QueryVotePeriod",
			Handler:    _Query_QueryVotePeriod_Handler,
		},
		{
			MethodName: "QueryCellars",
			Handler:    _Query_QueryCellars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reinvest/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReinvestVotesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReinvestVotesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReinvestVotesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryReinvestVotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReinvestVotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReinvestVotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReinvestVotes) > 0 {
		for iNdEx := len(m.ReinvestVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReinvestVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryReinvestVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReinvestVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReinvestVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cellar) > 0 {
		i -= len(m.Cellar)
		copy(dAtA[i:], m.Cellar)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cellar)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReinvestVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReinvestVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReinvestVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReinvestVote != nil {
		{
			size, err := m.ReinvestVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVotePeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotePeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotePeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVotePeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotePeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotePeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotePeriodEnd != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotePeriodEnd))
		i--
		dAtA[i] = 0x18
	}
	if m.VotePeriodStart != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotePeriodStart))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCellarsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCellarsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCellarsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCellarsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCellarsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCellarsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cellars) > 0 {
		for iNdEx := len(m.Cellars) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cellars[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReinvestVotesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryReinvestVotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReinvestVotes) > 0 {
		for _, e := range m.ReinvestVotes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryReinvestVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Cellar)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReinvestVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReinvestVote != nil {
		l = m.ReinvestVote.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVotePeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVotePeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentHeight != 0 {
		n += 1 + sovQuery(uint64(m.CurrentHeight))
	}
	if m.VotePeriodStart != 0 {
		n += 1 + sovQuery(uint64(m.VotePeriodStart))
	}
	if m.VotePeriodEnd != 0 {
		n += 1 + sovQuery(uint64(m.VotePeriodEnd))
	}
	return n
}

func (m *QueryCellarsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCellarsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cellars) > 0 {
		for _, e := range m.Cellars {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReinvestVotesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReinvestVotesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReinvestVotesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReinvestVotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReinvestVotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReinvestVotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReinvestVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReinvestVotes = append(m.ReinvestVotes, &ReinvestVote{})
			if err := m.ReinvestVotes[len(m.ReinvestVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReinvestVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReinvestVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReinvestVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cellar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cellar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReinvestVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReinvestVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReinvestVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReinvestVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReinvestVote == nil {
				m.ReinvestVote = &ReinvestVote{}
			}
			if err := m.ReinvestVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotePeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotePeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotePeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotePeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotePeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotePeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriodStart", wireType)
			}
			m.VotePeriodStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriodStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriodEnd", wireType)
			}
			m.VotePeriodEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriodEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCellarsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCellarsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCellarsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCellarsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCellarsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCellarsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cellars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cellars = append(m.Cellars, &Cellar{})
			if err := m.Cellars[len(m.Cellars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
