// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryDelegateAddressRequest struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryDelegateAddressRequest) Reset()         { *m = QueryDelegateAddressRequest{} }
func (m *QueryDelegateAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateAddressRequest) ProtoMessage()    {}
func (*QueryDelegateAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{2}
}
func (m *QueryDelegateAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateAddressRequest.Merge(m, src)
}
func (m *QueryDelegateAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateAddressRequest proto.InternalMessageInfo

func (m *QueryDelegateAddressRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type QueryDelegateAddressResponse struct {
	Delegate string `protobuf:"bytes,2,opt,name=delegate,proto3" json:"delegate,omitempty"`
}

func (m *QueryDelegateAddressResponse) Reset()         { *m = QueryDelegateAddressResponse{} }
func (m *QueryDelegateAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateAddressResponse) ProtoMessage()    {}
func (*QueryDelegateAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{3}
}
func (m *QueryDelegateAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateAddressResponse.Merge(m, src)
}
func (m *QueryDelegateAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateAddressResponse proto.InternalMessageInfo

func (m *QueryDelegateAddressResponse) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryValidatorAddressRequest struct {
	Delegate string `protobuf:"bytes,1,opt,name=delegate,proto3" json:"delegate,omitempty"`
}

func (m *QueryValidatorAddressRequest) Reset()         { *m = QueryValidatorAddressRequest{} }
func (m *QueryValidatorAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorAddressRequest) ProtoMessage()    {}
func (*QueryValidatorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{4}
}
func (m *QueryValidatorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorAddressRequest.Merge(m, src)
}
func (m *QueryValidatorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorAddressRequest proto.InternalMessageInfo

func (m *QueryValidatorAddressRequest) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

type QueryValidatorAddressResponse struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryValidatorAddressResponse) Reset()         { *m = QueryValidatorAddressResponse{} }
func (m *QueryValidatorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorAddressResponse) ProtoMessage()    {}
func (*QueryValidatorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{5}
}
func (m *QueryValidatorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorAddressResponse.Merge(m, src)
}
func (m *QueryValidatorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorAddressResponse proto.InternalMessageInfo

func (m *QueryValidatorAddressResponse) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryOracleDataPrevoteRequest struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryOracleDataPrevoteRequest) Reset()         { *m = QueryOracleDataPrevoteRequest{} }
func (m *QueryOracleDataPrevoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataPrevoteRequest) ProtoMessage()    {}
func (*QueryOracleDataPrevoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{6}
}
func (m *QueryOracleDataPrevoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataPrevoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataPrevoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataPrevoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataPrevoteRequest.Merge(m, src)
}
func (m *QueryOracleDataPrevoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataPrevoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataPrevoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataPrevoteRequest proto.InternalMessageInfo

func (m *QueryOracleDataPrevoteRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type QueryOracleDataPrevoteResponse struct {
	Prevote *OraclePrevote `protobuf:"bytes,1,opt,name=prevote,proto3" json:"prevote,omitempty"`
}

func (m *QueryOracleDataPrevoteResponse) Reset()         { *m = QueryOracleDataPrevoteResponse{} }
func (m *QueryOracleDataPrevoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataPrevoteResponse) ProtoMessage()    {}
func (*QueryOracleDataPrevoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{7}
}
func (m *QueryOracleDataPrevoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataPrevoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataPrevoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataPrevoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataPrevoteResponse.Merge(m, src)
}
func (m *QueryOracleDataPrevoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataPrevoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataPrevoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataPrevoteResponse proto.InternalMessageInfo

func (m *QueryOracleDataPrevoteResponse) GetPrevote() *OraclePrevote {
	if m != nil {
		return m.Prevote
	}
	return nil
}

// QueryOracleDataVoteRequest is the request type for the Query/Odra RPC method.
type QueryOracleDataVoteRequest struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryOracleDataVoteRequest) Reset()         { *m = QueryOracleDataVoteRequest{} }
func (m *QueryOracleDataVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataVoteRequest) ProtoMessage()    {}
func (*QueryOracleDataVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{8}
}
func (m *QueryOracleDataVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataVoteRequest.Merge(m, src)
}
func (m *QueryOracleDataVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataVoteRequest proto.InternalMessageInfo

func (m *QueryOracleDataVoteRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type QueryOracleDataVoteResponse struct {
	Vote *OracleVote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (m *QueryOracleDataVoteResponse) Reset()         { *m = QueryOracleDataVoteResponse{} }
func (m *QueryOracleDataVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleDataVoteResponse) ProtoMessage()    {}
func (*QueryOracleDataVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{9}
}
func (m *QueryOracleDataVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleDataVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleDataVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleDataVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleDataVoteResponse.Merge(m, src)
}
func (m *QueryOracleDataVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleDataVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleDataVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleDataVoteResponse proto.InternalMessageInfo

func (m *QueryOracleDataVoteResponse) GetVote() *OracleVote {
	if m != nil {
		return m.Vote
	}
	return nil
}

// QueryVotePeriodRequest is the request type for the Query/VotePeriod RPC method.
type QueryVotePeriodRequest struct {
}

func (m *QueryVotePeriodRequest) Reset()         { *m = QueryVotePeriodRequest{} }
func (m *QueryVotePeriodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVotePeriodRequest) ProtoMessage()    {}
func (*QueryVotePeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{10}
}
func (m *QueryVotePeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotePeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotePeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotePeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotePeriodRequest.Merge(m, src)
}
func (m *QueryVotePeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotePeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotePeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotePeriodRequest proto.InternalMessageInfo

type QueryVotePeriodResponse struct {
	CurrentHeight   int64 `protobuf:"varint,1,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
	VotePeriodStart int64 `protobuf:"varint,2,opt,name=vote_period_start,json=votePeriodStart,proto3" json:"vote_period_start,omitempty"`
	VotePeriodEnd   int64 `protobuf:"varint,3,opt,name=vote_period_end,json=votePeriodEnd,proto3" json:"vote_period_end,omitempty"`
}

func (m *QueryVotePeriodResponse) Reset()         { *m = QueryVotePeriodResponse{} }
func (m *QueryVotePeriodResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVotePeriodResponse) ProtoMessage()    {}
func (*QueryVotePeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{11}
}
func (m *QueryVotePeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotePeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotePeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotePeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotePeriodResponse.Merge(m, src)
}
func (m *QueryVotePeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotePeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotePeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotePeriodResponse proto.InternalMessageInfo

func (m *QueryVotePeriodResponse) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *QueryVotePeriodResponse) GetVotePeriodStart() int64 {
	if m != nil {
		return m.VotePeriodStart
	}
	return 0
}

func (m *QueryVotePeriodResponse) GetVotePeriodEnd() int64 {
	if m != nil {
		return m.VotePeriodEnd
	}
	return 0
}

// QueryMissCounterRequest is the request type for the Query/MissCounter RPC method.
type QueryMissCounterRequest struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryMissCounterRequest) Reset()         { *m = QueryMissCounterRequest{} }
func (m *QueryMissCounterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMissCounterRequest) ProtoMessage()    {}
func (*QueryMissCounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{12}
}
func (m *QueryMissCounterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMissCounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMissCounterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMissCounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissCounterRequest.Merge(m, src)
}
func (m *QueryMissCounterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMissCounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissCounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissCounterRequest proto.InternalMessageInfo

func (m *QueryMissCounterRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type QueryMissCounterResponse struct {
	MissCounter int64 `protobuf:"varint,1,opt,name=miss_counter,json=missCounter,proto3" json:"miss_counter,omitempty"`
}

func (m *QueryMissCounterResponse) Reset()         { *m = QueryMissCounterResponse{} }
func (m *QueryMissCounterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMissCounterResponse) ProtoMessage()    {}
func (*QueryMissCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{13}
}
func (m *QueryMissCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMissCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMissCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMissCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissCounterResponse.Merge(m, src)
}
func (m *QueryMissCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMissCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissCounterResponse proto.InternalMessageInfo

func (m *QueryMissCounterResponse) GetMissCounter() int64 {
	if m != nil {
		return m.MissCounter
	}
	return 0
}

// QueryAggregateDataRequest is the request type for the Query/AggregateData RPC method.
type QueryAggregateDataRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAggregateDataRequest) Reset()         { *m = QueryAggregateDataRequest{} }
func (m *QueryAggregateDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateDataRequest) ProtoMessage()    {}
func (*QueryAggregateDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{14}
}
func (m *QueryAggregateDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateDataRequest.Merge(m, src)
}
func (m *QueryAggregateDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateDataRequest proto.InternalMessageInfo

func (m *QueryAggregateDataRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *QueryAggregateDataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryAggregateDataResponse struct {
	OracleData *UniswapPair `protobuf:"bytes,1,opt,name=oracle_data,json=oracleData,proto3" json:"oracle_data,omitempty"`
}

func (m *QueryAggregateDataResponse) Reset()         { *m = QueryAggregateDataResponse{} }
func (m *QueryAggregateDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAggregateDataResponse) ProtoMessage()    {}
func (*QueryAggregateDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34238c8dfdfcd7ec, []int{15}
}
func (m *QueryAggregateDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAggregateDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAggregateDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAggregateDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAggregateDataResponse.Merge(m, src)
}
func (m *QueryAggregateDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAggregateDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAggregateDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAggregateDataResponse proto.InternalMessageInfo

func (m *QueryAggregateDataResponse) GetOracleData() *UniswapPair {
	if m != nil {
		return m.OracleData
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "oracle.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "oracle.v1.QueryParamsResponse")
	proto.RegisterType((*QueryDelegateAddressRequest)(nil), "oracle.v1.QueryDelegateAddressRequest")
	proto.RegisterType((*QueryDelegateAddressResponse)(nil), "oracle.v1.QueryDelegateAddressResponse")
	proto.RegisterType((*QueryValidatorAddressRequest)(nil), "oracle.v1.QueryValidatorAddressRequest")
	proto.RegisterType((*QueryValidatorAddressResponse)(nil), "oracle.v1.QueryValidatorAddressResponse")
	proto.RegisterType((*QueryOracleDataPrevoteRequest)(nil), "oracle.v1.QueryOracleDataPrevoteRequest")
	proto.RegisterType((*QueryOracleDataPrevoteResponse)(nil), "oracle.v1.QueryOracleDataPrevoteResponse")
	proto.RegisterType((*QueryOracleDataVoteRequest)(nil), "oracle.v1.QueryOracleDataVoteRequest")
	proto.RegisterType((*QueryOracleDataVoteResponse)(nil), "oracle.v1.QueryOracleDataVoteResponse")
	proto.RegisterType((*QueryVotePeriodRequest)(nil), "oracle.v1.QueryVotePeriodRequest")
	proto.RegisterType((*QueryVotePeriodResponse)(nil), "oracle.v1.QueryVotePeriodResponse")
	proto.RegisterType((*QueryMissCounterRequest)(nil), "oracle.v1.QueryMissCounterRequest")
	proto.RegisterType((*QueryMissCounterResponse)(nil), "oracle.v1.QueryMissCounterResponse")
	proto.RegisterType((*QueryAggregateDataRequest)(nil), "oracle.v1.QueryAggregateDataRequest")
	proto.RegisterType((*QueryAggregateDataResponse)(nil), "oracle.v1.QueryAggregateDataResponse")
}

func init() { proto.RegisterFile("oracle/v1/query.proto", fileDescriptor_34238c8dfdfcd7ec) }

var fileDescriptor_34238c8dfdfcd7ec = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4f, 0x4f, 0xdb, 0x48,
	0x1c, 0x8d, 0x03, 0xcb, 0x6e, 0x26, 0xbb, 0xb0, 0xcc, 0xf2, 0x27, 0x18, 0xf0, 0x82, 0x59, 0xb2,
	0x01, 0x56, 0xf1, 0x26, 0x2b, 0x2d, 0x12, 0x2b, 0xb4, 0x82, 0x85, 0x15, 0x97, 0xaa, 0x69, 0x5a,
	0x38, 0xf4, 0x12, 0x0d, 0xf1, 0xc8, 0xb8, 0x4a, 0x3c, 0xc6, 0x33, 0x49, 0x8b, 0xa2, 0x5c, 0xf8,
	0x04, 0x95, 0xe0, 0xd4, 0x4a, 0x55, 0xef, 0xfd, 0x22, 0x1c, 0x91, 0x7a, 0xe9, 0xa9, 0xaa, 0xa0,
	0x1f, 0xa4, 0xca, 0xcc, 0x38, 0x71, 0x6c, 0x87, 0xe4, 0x16, 0xff, 0xe6, 0xbd, 0xdf, 0x7b, 0x33,
	0xbf, 0xf1, 0x8b, 0xc1, 0x2c, 0xf1, 0x50, 0xb5, 0x86, 0x8d, 0x66, 0xc1, 0x38, 0x6f, 0x60, 0xef,
	0x22, 0xef, 0x7a, 0x84, 0x11, 0x98, 0x12, 0xe5, 0x7c, 0xb3, 0xa0, 0xce, 0x58, 0xc4, 0x22, 0xbc,
	0x6a, 0x74, 0x7e, 0x09, 0x80, 0xba, 0x64, 0x11, 0x62, 0xd5, 0xb0, 0x81, 0x5c, 0xdb, 0x40, 0x8e,
	0x43, 0x18, 0x62, 0x36, 0x71, 0xa8, 0x5c, 0x9d, 0xef, 0x75, 0xb5, 0xb0, 0x83, 0xa9, 0xed, 0x2f,
	0xcc, 0xf5, 0x16, 0xa4, 0x82, 0xa8, 0x2f, 0x54, 0x09, 0xad, 0x13, 0x5a, 0x11, 0x3a, 0xe2, 0x41,
	0x2c, 0xe9, 0x33, 0x00, 0x3e, 0xe9, 0x38, 0x2b, 0x21, 0x0f, 0xd5, 0x69, 0x19, 0x9f, 0x37, 0x30,
	0x65, 0xfa, 0xff, 0xe0, 0x97, 0xbe, 0x2a, 0x75, 0x89, 0x43, 0x31, 0x34, 0xc0, 0x84, 0xcb, 0x2b,
	0x19, 0x65, 0x45, 0xc9, 0xa5, 0x8b, 0xd3, 0xf9, 0xee, 0x46, 0xf2, 0x02, 0xba, 0x3f, 0x7e, 0xf3,
	0xf9, 0xd7, 0x44, 0x59, 0xc2, 0xf4, 0x7f, 0xc0, 0x22, 0xef, 0x73, 0x80, 0x6b, 0xd8, 0x42, 0x0c,
	0xef, 0x99, 0xa6, 0x87, 0xa9, 0x2f, 0x03, 0x97, 0x40, 0xaa, 0x89, 0x6a, 0xb6, 0x89, 0x18, 0xf1,
	0x78, 0xcb, 0x54, 0xb9, 0x57, 0xd0, 0x77, 0xc0, 0x52, 0x3c, 0x59, 0xba, 0x51, 0xc1, 0x0f, 0xa6,
	0x5c, 0xca, 0x24, 0x39, 0xb9, 0xfb, 0xdc, 0xe5, 0x9e, 0xf8, 0xdd, 0x42, 0xca, 0x41, 0xae, 0x12,
	0xe2, 0xee, 0x82, 0xe5, 0x01, 0x5c, 0x29, 0xfc, 0xb0, 0x6d, 0x9f, 0xfe, 0x98, 0x1f, 0xcd, 0x01,
	0x62, 0xa8, 0xe4, 0xe1, 0x26, 0x61, 0x78, 0xb4, 0x5d, 0x3f, 0x03, 0xda, 0x20, 0xba, 0x94, 0x2f,
	0x82, 0xef, 0x5d, 0x51, 0x92, 0x63, 0xc8, 0x04, 0xc6, 0x20, 0x68, 0x3e, 0xc5, 0x07, 0xea, 0x3b,
	0x40, 0x0d, 0x75, 0x3d, 0x19, 0xd9, 0xd1, 0x91, 0x1c, 0x62, 0x98, 0x2b, 0xed, 0x6c, 0x80, 0xf1,
	0x80, 0x97, 0xd9, 0x88, 0x17, 0x0e, 0xe6, 0x10, 0x3d, 0x03, 0xe6, 0xc4, 0xc9, 0x12, 0x86, 0x4b,
	0xd8, 0xb3, 0x89, 0xe9, 0x5f, 0xb8, 0x6b, 0x05, 0xcc, 0x47, 0x96, 0xa4, 0xc0, 0x3a, 0x98, 0xac,
	0x36, 0x3c, 0x0f, 0x3b, 0xac, 0x72, 0x86, 0x6d, 0xeb, 0x8c, 0x71, 0xa9, 0xb1, 0xf2, 0x4f, 0xb2,
	0x7a, 0xc4, 0x8b, 0x70, 0x13, 0x4c, 0x77, 0x44, 0x2a, 0x2e, 0x67, 0x57, 0x28, 0x43, 0x1e, 0xe3,
	0xf7, 0x62, 0xac, 0x3c, 0xd5, 0xec, 0x76, 0x7d, 0xda, 0x29, 0xc3, 0x2c, 0x98, 0x0a, 0x62, 0xb1,
	0x63, 0x66, 0xc6, 0x44, 0xcf, 0x1e, 0xf2, 0xd0, 0x31, 0xf5, 0x6d, 0xe9, 0xea, 0x91, 0x4d, 0xe9,
	0x7f, 0xa4, 0xe1, 0x30, 0xec, 0x8d, 0x76, 0x66, 0xbb, 0x20, 0x13, 0x25, 0xca, 0xfd, 0xac, 0x82,
	0x1f, 0xeb, 0x36, 0xa5, 0x95, 0xaa, 0xa8, 0xcb, 0xdd, 0xa4, 0xeb, 0x3d, 0xa8, 0xfe, 0x2f, 0x58,
	0xe0, 0xf4, 0x3d, 0xcb, 0xf2, 0xf8, 0xa5, 0xec, 0x9c, 0xba, 0xaf, 0x0c, 0xc1, 0x38, 0xbb, 0x70,
	0xfd, 0x7b, 0xcb, 0x7f, 0xc3, 0x49, 0x90, 0xb4, 0x4d, 0xf9, 0x16, 0x24, 0x6d, 0x53, 0x3f, 0x96,
	0xf3, 0x0e, 0x35, 0x90, 0x0e, 0xb6, 0x41, 0x5a, 0x4c, 0xa9, 0x62, 0x22, 0x86, 0xe4, 0xe4, 0xe6,
	0x02, 0x93, 0x3b, 0x76, 0x6c, 0xfa, 0x12, 0xb9, 0x25, 0x64, 0x7b, 0x65, 0x40, 0xba, 0x73, 0x2f,
	0x7e, 0x48, 0x81, 0xef, 0x78, 0x5f, 0x78, 0x0e, 0xd2, 0x81, 0x84, 0x80, 0xcb, 0x01, 0x72, 0x34,
	0x4f, 0x54, 0x6d, 0xd0, 0xb2, 0x30, 0xa4, 0xaf, 0x5d, 0x7e, 0xfc, 0x7a, 0x95, 0x5c, 0x86, 0x8b,
	0x06, 0x25, 0xf5, 0x3a, 0xae, 0xd9, 0xd8, 0x33, 0x7a, 0x59, 0x26, 0xc2, 0x04, 0xbe, 0x55, 0xc0,
	0x4c, 0x5c, 0x20, 0xc0, 0x6c, 0xb8, 0x7b, 0x7c, 0xdc, 0xa8, 0xbf, 0x0f, 0xc5, 0x49, 0x3b, 0x45,
	0x6e, 0xe7, 0x0f, 0xb8, 0x19, 0x6b, 0xc7, 0x0f, 0x0a, 0x6a, 0xb4, 0xba, 0x03, 0x6f, 0xc3, 0x77,
	0x0a, 0x98, 0x8d, 0x8d, 0x0d, 0x18, 0x91, 0x1d, 0x10, 0x4a, 0x6a, 0x6e, 0x38, 0x70, 0x24, 0x83,
	0x5d, 0x57, 0xd4, 0x68, 0xf9, 0x66, 0xdb, 0xf0, 0xbd, 0x22, 0xdf, 0xbe, 0x48, 0xb2, 0xc0, 0x88,
	0xf0, 0xa0, 0xec, 0x52, 0x37, 0x46, 0x40, 0x4a, 0x8f, 0x05, 0xee, 0x71, 0x0b, 0x6e, 0xc4, 0xcf,
	0x54, 0xa0, 0xfb, 0xcf, 0xf0, 0x5a, 0x91, 0xff, 0x3b, 0xfd, 0x51, 0x03, 0xd7, 0x07, 0xab, 0x06,
	0x62, 0x4c, 0xcd, 0x0e, 0x83, 0x49, 0x67, 0x79, 0xee, 0x2c, 0x07, 0xb3, 0xf1, 0xa7, 0x17, 0xb1,
	0x75, 0xa9, 0x80, 0xa9, 0x50, 0x38, 0xc1, 0xd5, 0xc8, 0xac, 0xc2, 0x99, 0xa6, 0xea, 0x0f, 0x41,
	0xa4, 0x95, 0x1c, 0xb7, 0xa2, 0xc3, 0x95, 0x81, 0x56, 0x64, 0x46, 0xc1, 0x2b, 0x05, 0xfc, 0x1c,
	0x8e, 0x14, 0x18, 0x91, 0x88, 0x06, 0x95, 0xba, 0xf6, 0x20, 0x46, 0xfa, 0xf8, 0x9b, 0xfb, 0xf8,
	0x13, 0xe6, 0x63, 0x7d, 0x04, 0xe3, 0xaa, 0xff, 0x68, 0xde, 0x28, 0xf2, 0xfb, 0xa1, 0x2f, 0x68,
	0xe0, 0x6f, 0x61, 0xcd, 0xb8, 0x20, 0x53, 0xd7, 0x87, 0xa0, 0xa4, 0xb7, 0x6d, 0xee, 0xad, 0x00,
	0x8d, 0x58, 0x6f, 0xc8, 0xe7, 0xf0, 0x2c, 0x33, 0x5a, 0x9d, 0x38, 0x6c, 0x1b, 0x2d, 0xdb, 0x6c,
	0xef, 0x1f, 0xde, 0xdc, 0x69, 0xca, 0xed, 0x9d, 0xa6, 0x7c, 0xb9, 0xd3, 0x94, 0xd7, 0xf7, 0x5a,
	0xe2, 0xf6, 0x5e, 0x4b, 0x7c, 0xba, 0xd7, 0x12, 0xcf, 0xb7, 0x2c, 0x9b, 0x9d, 0x35, 0x4e, 0xf3,
	0x55, 0x52, 0x37, 0x5c, 0x6c, 0x59, 0x17, 0x2f, 0x9a, 0x81, 0xe6, 0xaf, 0xfc, 0xf6, 0x9d, 0x5e,
	0xf4, 0x74, 0x82, 0x7f, 0x29, 0xfd, 0xf5, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xdc, 0x70, 0xb2,
	0xcd, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the oracle module parameters.
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// QueryDelegateAddress queries the delegate account address of a validator
	QueryDelegateAddress(ctx context.Context, in *QueryDelegateAddressRequest, opts ...grpc.CallOption) (*QueryDelegateAddressResponse, error)
	// QueryValidatorAddress returns the validator address of a given delegate
	QueryValidatorAddress(ctx context.Context, in *QueryValidatorAddressRequest, opts ...grpc.CallOption) (*QueryValidatorAddressResponse, error)
	// QueryOracleDataPrevote queries the validator prevote in the current voting period
	QueryOracleDataPrevote(ctx context.Context, in *QueryOracleDataPrevoteRequest, opts ...grpc.CallOption) (*QueryOracleDataPrevoteResponse, error)
	// QueryOracleDataVote queries the validator vote in the current voting period
	QueryOracleDataVote(ctx context.Context, in *QueryOracleDataVoteRequest, opts ...grpc.CallOption) (*QueryOracleDataVoteResponse, error)
	// QueryVotePeriod queries the heights for the current voting period (current, start and end)
	QueryVotePeriod(ctx context.Context, in *QueryVotePeriodRequest, opts ...grpc.CallOption) (*QueryVotePeriodResponse, error)
	// QueryMissCounter queries the missed number of oracle data feed periods
	QueryMissCounter(ctx context.Context, in *QueryMissCounterRequest, opts ...grpc.CallOption) (*QueryMissCounterResponse, error)
	// QueryAggregateData returns the aggregated data for a given pair an identifioer
	QueryAggregateData(ctx context.Context, in *QueryAggregateDataRequest, opts ...grpc.CallOption) (*QueryAggregateDataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDelegateAddress(ctx context.Context, in *QueryDelegateAddressRequest, opts ...grpc.CallOption) (*QueryDelegateAddressResponse, error) {
	out := new(QueryDelegateAddressResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryDelegateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryValidatorAddress(ctx context.Context, in *QueryValidatorAddressRequest, opts ...grpc.CallOption) (*QueryValidatorAddressResponse, error) {
	out := new(QueryValidatorAddressResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryValidatorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOracleDataPrevote(ctx context.Context, in *QueryOracleDataPrevoteRequest, opts ...grpc.CallOption) (*QueryOracleDataPrevoteResponse, error) {
	out := new(QueryOracleDataPrevoteResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryOracleDataPrevote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOracleDataVote(ctx context.Context, in *QueryOracleDataVoteRequest, opts ...grpc.CallOption) (*QueryOracleDataVoteResponse, error) {
	out := new(QueryOracleDataVoteResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryOracleDataVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryVotePeriod(ctx context.Context, in *QueryVotePeriodRequest, opts ...grpc.CallOption) (*QueryVotePeriodResponse, error) {
	out := new(QueryVotePeriodResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryVotePeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryMissCounter(ctx context.Context, in *QueryMissCounterRequest, opts ...grpc.CallOption) (*QueryMissCounterResponse, error) {
	out := new(QueryMissCounterResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryMissCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAggregateData(ctx context.Context, in *QueryAggregateDataRequest, opts ...grpc.CallOption) (*QueryAggregateDataResponse, error) {
	out := new(QueryAggregateDataResponse)
	err := c.cc.Invoke(ctx, "/oracle.v1.Query/QueryAggregateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the oracle module parameters.
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// QueryDelegateAddress queries the delegate account address of a validator
	QueryDelegateAddress(context.Context, *QueryDelegateAddressRequest) (*QueryDelegateAddressResponse, error)
	// QueryValidatorAddress returns the validator address of a given delegate
	QueryValidatorAddress(context.Context, *QueryValidatorAddressRequest) (*QueryValidatorAddressResponse, error)
	// QueryOracleDataPrevote queries the validator prevote in the current voting period
	QueryOracleDataPrevote(context.Context, *QueryOracleDataPrevoteRequest) (*QueryOracleDataPrevoteResponse, error)
	// QueryOracleDataVote queries the validator vote in the current voting period
	QueryOracleDataVote(context.Context, *QueryOracleDataVoteRequest) (*QueryOracleDataVoteResponse, error)
	// QueryVotePeriod queries the heights for the current voting period (current, start and end)
	QueryVotePeriod(context.Context, *QueryVotePeriodRequest) (*QueryVotePeriodResponse, error)
	// QueryMissCounter queries the missed number of oracle data feed periods
	QueryMissCounter(context.Context, *QueryMissCounterRequest) (*QueryMissCounterResponse, error)
	// QueryAggregateData returns the aggregated data for a given pair an identifioer
	QueryAggregateData(context.Context, *QueryAggregateDataRequest) (*QueryAggregateDataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}
func (*UnimplementedQueryServer) QueryDelegateAddress(ctx context.Context, req *QueryDelegateAddressRequest) (*QueryDelegateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelegateAddress not implemented")
}
func (*UnimplementedQueryServer) QueryValidatorAddress(ctx context.Context, req *QueryValidatorAddressRequest) (*QueryValidatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryValidatorAddress not implemented")
}
func (*UnimplementedQueryServer) QueryOracleDataPrevote(ctx context.Context, req *QueryOracleDataPrevoteRequest) (*QueryOracleDataPrevoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOracleDataPrevote not implemented")
}
func (*UnimplementedQueryServer) QueryOracleDataVote(ctx context.Context, req *QueryOracleDataVoteRequest) (*QueryOracleDataVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOracleDataVote not implemented")
}
func (*UnimplementedQueryServer) QueryVotePeriod(ctx context.Context, req *QueryVotePeriodRequest) (*QueryVotePeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVotePeriod not implemented")
}
func (*UnimplementedQueryServer) QueryMissCounter(ctx context.Context, req *QueryMissCounterRequest) (*QueryMissCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMissCounter not implemented")
}
func (*UnimplementedQueryServer) QueryAggregateData(ctx context.Context, req *QueryAggregateDataRequest) (*QueryAggregateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAggregateData not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDelegateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDelegateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryDelegateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDelegateAddress(ctx, req.(*QueryDelegateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryValidatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryValidatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryValidatorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryValidatorAddress(ctx, req.(*QueryValidatorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOracleDataPrevote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleDataPrevoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOracleDataPrevote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryOracleDataPrevote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOracleDataPrevote(ctx, req.(*QueryOracleDataPrevoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOracleDataVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleDataVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOracleDataVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryOracleDataVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOracleDataVote(ctx, req.(*QueryOracleDataVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryVotePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryVotePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryVotePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryVotePeriod(ctx, req.(*QueryVotePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryMissCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMissCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryMissCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryMissCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryMissCounter(ctx, req.(*QueryMissCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAggregateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAggregateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.v1.Query/QueryAggregateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAggregateData(ctx, req.(*QueryAggregateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oracle.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryParams",
			Handler:    _Query_QueryParams_Handler,
		},
		{
			MethodName: "QueryDelegateAddress",
			Handler:    _Query_QueryDelegateAddress_Handler,
		},
		{
			MethodName: "QueryValidatorAddress",
			Handler:    _Query_QueryValidatorAddress_Handler,
		},
		{
			MethodName: "QueryOracleDataPrevote",
			Handler:    _Query_QueryOracleDataPrevote_Handler,
		},
		{
			MethodName: "QueryOracleDataVote",
			Handler:    _Query_QueryOracleDataVote_Handler,
		},
		{
			MethodName: "QueryVotePeriod",
			Handler:    _Query_QueryVotePeriod_Handler,
		},
		{
			MethodName: "QueryMissCounter",
			Handler:    _Query_QueryMissCounter_Handler,
		},
		{
			MethodName: "QueryAggregateData",
			Handler:    _Query_QueryAggregateData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oracle/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegateAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataPrevoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataPrevoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataPrevoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataPrevoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataPrevoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataPrevoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Prevote != nil {
		{
			size, err := m.Prevote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleDataVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleDataVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleDataVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVotePeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotePeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotePeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVotePeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotePeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotePeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotePeriodEnd != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotePeriodEnd))
		i--
		dAtA[i] = 0x18
	}
	if m.VotePeriodStart != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotePeriodStart))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMissCounterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMissCounterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMissCounterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMissCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMissCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMissCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissCounter != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MissCounter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAggregateDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAggregateDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAggregateDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleData != nil {
		{
			size, err := m.OracleData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegateAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleDataPrevoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleDataPrevoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prevote != nil {
		l = m.Prevote.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleDataVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleDataVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVotePeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVotePeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentHeight != 0 {
		n += 1 + sovQuery(uint64(m.CurrentHeight))
	}
	if m.VotePeriodStart != 0 {
		n += 1 + sovQuery(uint64(m.VotePeriodStart))
	}
	if m.VotePeriodEnd != 0 {
		n += 1 + sovQuery(uint64(m.VotePeriodEnd))
	}
	return n
}

func (m *QueryMissCounterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMissCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MissCounter != 0 {
		n += 1 + sovQuery(uint64(m.MissCounter))
	}
	return n
}

func (m *QueryAggregateDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAggregateDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleData != nil {
		l = m.OracleData.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleDataPrevoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleDataPrevoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataPrevoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleDataPrevoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleDataPrevoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataPrevoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prevote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prevote == nil {
				m.Prevote = &OraclePrevote{}
			}
			if err := m.Prevote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleDataVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleDataVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleDataVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleDataVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleDataVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &OracleVote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotePeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotePeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotePeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotePeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotePeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotePeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriodStart", wireType)
			}
			m.VotePeriodStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriodStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriodEnd", wireType)
			}
			m.VotePeriodEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriodEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMissCounterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMissCounterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissCounterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMissCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMissCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMissCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissCounter", wireType)
			}
			m.MissCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAggregateDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAggregateDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAggregateDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleData == nil {
				m.OracleData = &UniswapPair{}
			}
			if err := m.OracleData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
