// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: allocation/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAllocationPrecommit - sdk.Msg for prevoting on an array of oracle data types.
// The purpose of the prevote is to hide vote for data with hashes formatted as hex string:
// SHA256("{salt}:{data_cannonical_json}:{voter}")
type MsgAllocationPrecommit struct {
	// precommit containing the hash of the allocation precommit contents
	Precommit []*AllocationPrecommit `protobuf:"bytes,1,rep,name=precommit,proto3" json:"precommit,omitempty"`
	// signer (i.e feeder) account address
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgAllocationPrecommit) Reset()         { *m = MsgAllocationPrecommit{} }
func (m *MsgAllocationPrecommit) String() string { return proto.CompactTextString(m) }
func (*MsgAllocationPrecommit) ProtoMessage()    {}
func (*MsgAllocationPrecommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{0}
}
func (m *MsgAllocationPrecommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAllocationPrecommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAllocationPrecommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAllocationPrecommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllocationPrecommit.Merge(m, src)
}
func (m *MsgAllocationPrecommit) XXX_Size() int {
	return m.Size()
}
func (m *MsgAllocationPrecommit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllocationPrecommit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllocationPrecommit proto.InternalMessageInfo

func (m *MsgAllocationPrecommit) GetPrecommit() []*AllocationPrecommit {
	if m != nil {
		return m.Precommit
	}
	return nil
}

func (m *MsgAllocationPrecommit) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgAllocationPrecommitResponse is the response type for the Msg/AllocationPrecommitResponse gRPC method.
type MsgAllocationPrecommitResponse struct {
}

func (m *MsgAllocationPrecommitResponse) Reset()         { *m = MsgAllocationPrecommitResponse{} }
func (m *MsgAllocationPrecommitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAllocationPrecommitResponse) ProtoMessage()    {}
func (*MsgAllocationPrecommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{1}
}
func (m *MsgAllocationPrecommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAllocationPrecommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAllocationPrecommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAllocationPrecommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllocationPrecommitResponse.Merge(m, src)
}
func (m *MsgAllocationPrecommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAllocationPrecommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllocationPrecommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllocationPrecommitResponse proto.InternalMessageInfo

// MsgAllocationCommit - sdk.Msg for submitting arbitrary oracle data that has been prevoted on
type MsgAllocationCommit struct {
	// vote containing the oracle data feed
	Commit []*Allocation `protobuf:"bytes,1,rep,name=commit,proto3" json:"commit,omitempty"`
	// signer (i.e feeder) account address
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgAllocationCommit) Reset()         { *m = MsgAllocationCommit{} }
func (m *MsgAllocationCommit) String() string { return proto.CompactTextString(m) }
func (*MsgAllocationCommit) ProtoMessage()    {}
func (*MsgAllocationCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{2}
}
func (m *MsgAllocationCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAllocationCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAllocationCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAllocationCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllocationCommit.Merge(m, src)
}
func (m *MsgAllocationCommit) XXX_Size() int {
	return m.Size()
}
func (m *MsgAllocationCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllocationCommit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllocationCommit proto.InternalMessageInfo

func (m *MsgAllocationCommit) GetCommit() []*Allocation {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *MsgAllocationCommit) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgAllocationCommitResponse is the response type for the Msg/AllocationCommit gRPC method.
type MsgAllocationCommitResponse struct {
}

func (m *MsgAllocationCommitResponse) Reset()         { *m = MsgAllocationCommitResponse{} }
func (m *MsgAllocationCommitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAllocationCommitResponse) ProtoMessage()    {}
func (*MsgAllocationCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{3}
}
func (m *MsgAllocationCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAllocationCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAllocationCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAllocationCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllocationCommitResponse.Merge(m, src)
}
func (m *MsgAllocationCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAllocationCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllocationCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllocationCommitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAllocationPrecommit)(nil), "allocation.v1.MsgAllocationPrecommit")
	proto.RegisterType((*MsgAllocationPrecommitResponse)(nil), "allocation.v1.MsgAllocationPrecommitResponse")
	proto.RegisterType((*MsgAllocationCommit)(nil), "allocation.v1.MsgAllocationCommit")
	proto.RegisterType((*MsgAllocationCommitResponse)(nil), "allocation.v1.MsgAllocationCommitResponse")
}

func init() { proto.RegisterFile("allocation/v1/tx.proto", fileDescriptor_194e979be0693c53) }

var fileDescriptor_194e979be0693c53 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xed, 0x7c, 0x85, 0x40, 0xe7, 0x43, 0x90, 0x14, 0x4a, 0x1b, 0x71, 0x08, 0x01, 0xa1, 0x08,
	0x66, 0x48, 0x7d, 0x01, 0x7f, 0x56, 0x2e, 0x0a, 0x92, 0xa5, 0x1b, 0x4d, 0xc2, 0x38, 0x46, 0x33,
	0xb9, 0x21, 0x33, 0x0d, 0xcd, 0x5b, 0xf8, 0x58, 0x2e, 0xbb, 0x12, 0x97, 0x92, 0xbc, 0x88, 0x90,
	0x34, 0xb6, 0xd1, 0x68, 0x5d, 0x9e, 0x39, 0xe7, 0x9e, 0x73, 0xee, 0x70, 0xf1, 0xc8, 0x8b, 0x22,
	0x08, 0x3c, 0x15, 0x42, 0x4c, 0x33, 0x87, 0xaa, 0xa5, 0x9d, 0xa4, 0xa0, 0x40, 0xdf, 0xdb, 0xbc,
	0xdb, 0x99, 0x63, 0x4c, 0x02, 0x90, 0x02, 0xe4, 0x6d, 0x45, 0xd2, 0x1a, 0xd4, 0x4a, 0x63, 0xc2,
	0x01, 0x78, 0xc4, 0x68, 0x85, 0xfc, 0xc5, 0x3d, 0xf5, 0xe2, 0x7c, 0x4d, 0x91, 0xb6, 0xf9, 0x96,
	0x65, 0xc5, 0x5b, 0x29, 0x1e, 0xcd, 0x25, 0x3f, 0xff, 0x7c, 0xbe, 0x4e, 0x59, 0x00, 0x42, 0x84,
	0x4a, 0x3f, 0xc3, 0x83, 0xa4, 0x01, 0x63, 0x64, 0xf6, 0xa7, 0xff, 0x67, 0x96, 0xdd, 0xaa, 0x64,
	0x77, 0x8c, 0xb9, 0x9b, 0x21, 0x7d, 0x84, 0x35, 0x19, 0xf2, 0x98, 0xa5, 0xe3, 0x7f, 0x26, 0x9a,
	0x0e, 0xdc, 0x35, 0xb2, 0x4c, 0x4c, 0xba, 0x33, 0x5d, 0x26, 0x13, 0x88, 0x25, 0xb3, 0xee, 0xf0,
	0xb0, 0xa5, 0xb8, 0xac, 0x0d, 0x1d, 0xac, 0xb5, 0xfa, 0x4c, 0x7e, 0xec, 0xe3, 0x6a, 0x3b, 0x3a,
	0x1c, 0xe2, 0x83, 0x8e, 0x84, 0xa6, 0xc0, 0xec, 0x15, 0xe1, 0xfe, 0x5c, 0x72, 0xfd, 0x09, 0x0f,
	0xbb, 0xfe, 0xe6, 0xe8, 0x4b, 0x70, 0xf7, 0x3a, 0xc6, 0xc9, 0x9f, 0x64, 0x4d, 0xa8, 0xee, 0xe3,
	0xfd, 0x6f, 0x2b, 0x5b, 0xbf, 0x59, 0xd4, 0x1a, 0xe3, 0x78, 0xb7, 0xa6, 0xc9, 0xb8, 0xb8, 0x7a,
	0x29, 0x08, 0x5a, 0x15, 0x04, 0xbd, 0x17, 0x04, 0x3d, 0x97, 0xa4, 0xb7, 0x2a, 0x49, 0xef, 0xad,
	0x24, 0xbd, 0x1b, 0xca, 0x43, 0xf5, 0xb0, 0xf0, 0xed, 0x00, 0x04, 0x4d, 0x18, 0xe7, 0xf9, 0x63,
	0x46, 0x25, 0x08, 0xc1, 0xa2, 0x90, 0xa5, 0x74, 0xb9, 0x75, 0x3a, 0x54, 0xe5, 0x09, 0x93, 0xbe,
	0x56, 0x5d, 0xd0, 0xe9, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0x93, 0xba, 0xe3, 0xc0, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// AllocationPrecommit defines a message that commits a hash of allocation data feed before the data is actually submitted.
	AllocationPrecommit(ctx context.Context, in *MsgAllocationPrecommit, opts ...grpc.CallOption) (*MsgAllocationPrecommitResponse, error)
	// AllocationCommit defines a message to submit the actual allocation data that was committed by the feeder through the pre-commit.
	AllocationCommit(ctx context.Context, in *MsgAllocationCommit, opts ...grpc.CallOption) (*MsgAllocationCommitResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AllocationPrecommit(ctx context.Context, in *MsgAllocationPrecommit, opts ...grpc.CallOption) (*MsgAllocationPrecommitResponse, error) {
	out := new(MsgAllocationPrecommitResponse)
	err := c.cc.Invoke(ctx, "/allocation.v1.Msg/AllocationPrecommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AllocationCommit(ctx context.Context, in *MsgAllocationCommit, opts ...grpc.CallOption) (*MsgAllocationCommitResponse, error) {
	out := new(MsgAllocationCommitResponse)
	err := c.cc.Invoke(ctx, "/allocation.v1.Msg/AllocationCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// AllocationPrecommit defines a message that commits a hash of allocation data feed before the data is actually submitted.
	AllocationPrecommit(context.Context, *MsgAllocationPrecommit) (*MsgAllocationPrecommitResponse, error)
	// AllocationCommit defines a message to submit the actual allocation data that was committed by the feeder through the pre-commit.
	AllocationCommit(context.Context, *MsgAllocationCommit) (*MsgAllocationCommitResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AllocationPrecommit(ctx context.Context, req *MsgAllocationPrecommit) (*MsgAllocationPrecommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationPrecommit not implemented")
}
func (*UnimplementedMsgServer) AllocationCommit(ctx context.Context, req *MsgAllocationCommit) (*MsgAllocationCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationCommit not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AllocationPrecommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAllocationPrecommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AllocationPrecommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.v1.Msg/AllocationPrecommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AllocationPrecommit(ctx, req.(*MsgAllocationPrecommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AllocationCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAllocationCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AllocationCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.v1.Msg/AllocationCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AllocationCommit(ctx, req.(*MsgAllocationCommit))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "allocation.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocationPrecommit",
			Handler:    _Msg_AllocationPrecommit_Handler,
		},
		{
			MethodName: "AllocationCommit",
			Handler:    _Msg_AllocationCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allocation/v1/tx.proto",
}

func (m *MsgAllocationPrecommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAllocationPrecommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAllocationPrecommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Precommit) > 0 {
		for iNdEx := len(m.Precommit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Precommit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgAllocationPrecommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAllocationPrecommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAllocationPrecommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAllocationCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAllocationCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAllocationCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Commit) > 0 {
		for iNdEx := len(m.Commit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgAllocationCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAllocationCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAllocationCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAllocationPrecommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Precommit) > 0 {
		for _, e := range m.Precommit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAllocationPrecommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAllocationCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commit) > 0 {
		for _, e := range m.Commit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAllocationCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAllocationPrecommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAllocationPrecommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAllocationPrecommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Precommit = append(m.Precommit, &AllocationPrecommit{})
			if err := m.Precommit[len(m.Precommit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAllocationPrecommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAllocationPrecommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAllocationPrecommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAllocationCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAllocationCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAllocationCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = append(m.Commit, &Allocation{})
			if err := m.Commit[len(m.Commit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAllocationCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAllocationCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAllocationCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
