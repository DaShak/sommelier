// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: allocation/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgDelegateDecisionsRequest is the request type for DelegateDecisions
type MsgDelegateDecisions struct {
	Delegate  string `protobuf:"bytes,1,opt,name=delegate,proto3" json:"delegate,omitempty"`
	Validator string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *MsgDelegateDecisions) Reset()         { *m = MsgDelegateDecisions{} }
func (m *MsgDelegateDecisions) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateDecisions) ProtoMessage()    {}
func (*MsgDelegateDecisions) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{0}
}
func (m *MsgDelegateDecisions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateDecisions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateDecisions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateDecisions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateDecisions.Merge(m, src)
}
func (m *MsgDelegateDecisions) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateDecisions) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateDecisions.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateDecisions proto.InternalMessageInfo

func (m *MsgDelegateDecisions) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

func (m *MsgDelegateDecisions) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

// MsgDelegateDecisionsResponse is the response type for DelegateDecisions
type MsgDelegateDecisionsResponse struct {
}

func (m *MsgDelegateDecisionsResponse) Reset()         { *m = MsgDelegateDecisionsResponse{} }
func (m *MsgDelegateDecisionsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateDecisionsResponse) ProtoMessage()    {}
func (*MsgDelegateDecisionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{1}
}
func (m *MsgDelegateDecisionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateDecisionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateDecisionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateDecisionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateDecisionsResponse.Merge(m, src)
}
func (m *MsgDelegateDecisionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateDecisionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateDecisionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateDecisionsResponse proto.InternalMessageInfo

// MsgDecisionPrecommitRequest is the request type for DecisionPrecommit
type MsgDecisionPrecommit struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgDecisionPrecommit) Reset()         { *m = MsgDecisionPrecommit{} }
func (m *MsgDecisionPrecommit) String() string { return proto.CompactTextString(m) }
func (*MsgDecisionPrecommit) ProtoMessage()    {}
func (*MsgDecisionPrecommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{2}
}
func (m *MsgDecisionPrecommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecisionPrecommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecisionPrecommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecisionPrecommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecisionPrecommit.Merge(m, src)
}
func (m *MsgDecisionPrecommit) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecisionPrecommit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecisionPrecommit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecisionPrecommit proto.InternalMessageInfo

func (m *MsgDecisionPrecommit) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *MsgDecisionPrecommit) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgDecisionPrecommitResponse is the response type for MsgDecisionPrecommit
type MsgDecisionPrecommitResponse struct {
}

func (m *MsgDecisionPrecommitResponse) Reset()         { *m = MsgDecisionPrecommitResponse{} }
func (m *MsgDecisionPrecommitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDecisionPrecommitResponse) ProtoMessage()    {}
func (*MsgDecisionPrecommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{3}
}
func (m *MsgDecisionPrecommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecisionPrecommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecisionPrecommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecisionPrecommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecisionPrecommitResponse.Merge(m, src)
}
func (m *MsgDecisionPrecommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecisionPrecommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecisionPrecommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecisionPrecommitResponse proto.InternalMessageInfo

// MsgDecisionCommitRequest is the request type for DecisionCommit
type MsgDecisionCommit struct {
	Decisions []*Decision `protobuf:"bytes,1,rep,name=decisions,proto3" json:"decisions,omitempty"`
	Salt      string      `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	Signer    string      `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgDecisionCommit) Reset()         { *m = MsgDecisionCommit{} }
func (m *MsgDecisionCommit) String() string { return proto.CompactTextString(m) }
func (*MsgDecisionCommit) ProtoMessage()    {}
func (*MsgDecisionCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{4}
}
func (m *MsgDecisionCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecisionCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecisionCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecisionCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecisionCommit.Merge(m, src)
}
func (m *MsgDecisionCommit) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecisionCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecisionCommit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecisionCommit proto.InternalMessageInfo

func (m *MsgDecisionCommit) GetDecisions() []*Decision {
	if m != nil {
		return m.Decisions
	}
	return nil
}

func (m *MsgDecisionCommit) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *MsgDecisionCommit) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// Decision is the XXX
type Decision struct {
	CellarId    string        `protobuf:"bytes,1,opt,name=cellar_id,json=cellarId,proto3" json:"cellar_id,omitempty"`
	FeeLevel    string        `protobuf:"bytes,2,opt,name=fee_level,json=feeLevel,proto3" json:"fee_level,omitempty"`
	TickWeights []*TickWeight `protobuf:"bytes,3,rep,name=tick_weights,json=tickWeights,proto3" json:"tick_weights,omitempty"`
}

func (m *Decision) Reset()         { *m = Decision{} }
func (m *Decision) String() string { return proto.CompactTextString(m) }
func (*Decision) ProtoMessage()    {}
func (*Decision) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{5}
}
func (m *Decision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Decision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Decision.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Decision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decision.Merge(m, src)
}
func (m *Decision) XXX_Size() int {
	return m.Size()
}
func (m *Decision) XXX_DiscardUnknown() {
	xxx_messageInfo_Decision.DiscardUnknown(m)
}

var xxx_messageInfo_Decision proto.InternalMessageInfo

func (m *Decision) GetCellarId() string {
	if m != nil {
		return m.CellarId
	}
	return ""
}

func (m *Decision) GetFeeLevel() string {
	if m != nil {
		return m.FeeLevel
	}
	return ""
}

func (m *Decision) GetTickWeights() []*TickWeight {
	if m != nil {
		return m.TickWeights
	}
	return nil
}

// TickWeight is the XXX
type TickWeight struct {
	Tick   *Tick  `protobuf:"bytes,1,opt,name=tick,proto3" json:"tick,omitempty"`
	Weight string `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *TickWeight) Reset()         { *m = TickWeight{} }
func (m *TickWeight) String() string { return proto.CompactTextString(m) }
func (*TickWeight) ProtoMessage()    {}
func (*TickWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{6}
}
func (m *TickWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickWeight.Merge(m, src)
}
func (m *TickWeight) XXX_Size() int {
	return m.Size()
}
func (m *TickWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_TickWeight.DiscardUnknown(m)
}

var xxx_messageInfo_TickWeight proto.InternalMessageInfo

func (m *TickWeight) GetTick() *Tick {
	if m != nil {
		return m.Tick
	}
	return nil
}

func (m *TickWeight) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

// Tick is the XXX
type Tick struct {
	Min uint64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max uint64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (m *Tick) Reset()         { *m = Tick{} }
func (m *Tick) String() string { return proto.CompactTextString(m) }
func (*Tick) ProtoMessage()    {}
func (*Tick) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{7}
}
func (m *Tick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tick.Merge(m, src)
}
func (m *Tick) XXX_Size() int {
	return m.Size()
}
func (m *Tick) XXX_DiscardUnknown() {
	xxx_messageInfo_Tick.DiscardUnknown(m)
}

var xxx_messageInfo_Tick proto.InternalMessageInfo

func (m *Tick) GetMin() uint64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Tick) GetMax() uint64 {
	if m != nil {
		return m.Max
	}
	return 0
}

// MsgDecisionCommitResponse is the response type for the Msg/DecisionCommit gRPC method.
type MsgDecisionCommitResponse struct {
}

func (m *MsgDecisionCommitResponse) Reset()         { *m = MsgDecisionCommitResponse{} }
func (m *MsgDecisionCommitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDecisionCommitResponse) ProtoMessage()    {}
func (*MsgDecisionCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_194e979be0693c53, []int{8}
}
func (m *MsgDecisionCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDecisionCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDecisionCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDecisionCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDecisionCommitResponse.Merge(m, src)
}
func (m *MsgDecisionCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDecisionCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDecisionCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDecisionCommitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDelegateDecisions)(nil), "allocation.v1.MsgDelegateDecisions")
	proto.RegisterType((*MsgDelegateDecisionsResponse)(nil), "allocation.v1.MsgDelegateDecisionsResponse")
	proto.RegisterType((*MsgDecisionPrecommit)(nil), "allocation.v1.MsgDecisionPrecommit")
	proto.RegisterType((*MsgDecisionPrecommitResponse)(nil), "allocation.v1.MsgDecisionPrecommitResponse")
	proto.RegisterType((*MsgDecisionCommit)(nil), "allocation.v1.MsgDecisionCommit")
	proto.RegisterType((*Decision)(nil), "allocation.v1.Decision")
	proto.RegisterType((*TickWeight)(nil), "allocation.v1.TickWeight")
	proto.RegisterType((*Tick)(nil), "allocation.v1.Tick")
	proto.RegisterType((*MsgDecisionCommitResponse)(nil), "allocation.v1.MsgDecisionCommitResponse")
}

func init() { proto.RegisterFile("allocation/v1/tx.proto", fileDescriptor_194e979be0693c53) }

var fileDescriptor_194e979be0693c53 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x6b, 0xdb, 0x4c,
	0x10, 0xb5, 0x22, 0x13, 0xec, 0x71, 0xbe, 0x8f, 0x66, 0x5b, 0x52, 0xc7, 0x09, 0xc2, 0xa8, 0x87,
	0x9a, 0x16, 0x24, 0xe2, 0xd2, 0x5b, 0x4f, 0x69, 0x2e, 0x81, 0x1a, 0x82, 0x28, 0x14, 0x4a, 0xc1,
	0x6c, 0xa4, 0x89, 0xbc, 0xcd, 0x4a, 0x6b, 0xb4, 0x5b, 0xd5, 0xb9, 0xf6, 0x17, 0xf4, 0xaf, 0xf4,
	0x5f, 0xf4, 0x98, 0x63, 0x8f, 0xc5, 0xfe, 0x23, 0x45, 0x2b, 0xad, 0xed, 0x28, 0x0a, 0xed, 0x6d,
	0xe6, 0xcd, 0xd3, 0x7b, 0xcf, 0xe3, 0x59, 0x38, 0xa0, 0x9c, 0x8b, 0x90, 0x2a, 0x26, 0x52, 0x3f,
	0x3f, 0xf1, 0xd5, 0xc2, 0x9b, 0x67, 0x42, 0x09, 0xf2, 0xdf, 0x06, 0xf7, 0xf2, 0x13, 0xf7, 0x02,
	0x9e, 0x4c, 0x64, 0x7c, 0x86, 0x1c, 0x63, 0xaa, 0xf0, 0x0c, 0x43, 0x26, 0x99, 0x48, 0x25, 0x19,
	0x40, 0x27, 0xaa, 0xc0, 0xbe, 0x35, 0xb4, 0x46, 0xdd, 0x60, 0xdd, 0x93, 0x63, 0xe8, 0xe6, 0x94,
	0xb3, 0x88, 0x2a, 0x91, 0xf5, 0x77, 0xf4, 0x70, 0x03, 0xb8, 0x0e, 0x1c, 0x37, 0x29, 0x06, 0x28,
	0xe7, 0x22, 0x95, 0xe8, 0x9e, 0x56, 0x8e, 0x25, 0x7e, 0x91, 0x61, 0x28, 0x92, 0x84, 0x29, 0x42,
	0xa0, 0x3d, 0xa3, 0x72, 0xa6, 0xdd, 0xf6, 0x02, 0x5d, 0x93, 0x03, 0xd8, 0x95, 0x2c, 0x4e, 0xd1,
	0xd8, 0x54, 0xdd, 0xda, 0xa3, 0xa6, 0xb1, 0xf6, 0xc8, 0x61, 0x7f, 0x6b, 0xfe, 0xb6, 0x34, 0x78,
	0x0d, 0xdd, 0xc8, 0xa4, 0xe9, 0x5b, 0x43, 0x7b, 0xd4, 0x1b, 0x3f, 0xf5, 0xee, 0x6c, 0xc3, 0x33,
	0x5f, 0x04, 0x1b, 0x66, 0x91, 0x4b, 0x52, 0xae, 0xaa, 0x04, 0xba, 0xde, 0xca, 0x65, 0xdf, 0xc9,
	0xf5, 0xcd, 0x82, 0x8e, 0xd1, 0x20, 0x47, 0xd0, 0x0d, 0x91, 0x73, 0x9a, 0x4d, 0x59, 0x64, 0x76,
	0x58, 0x02, 0xe7, 0x51, 0x31, 0xbc, 0x42, 0x9c, 0x72, 0xcc, 0x91, 0x57, 0xd2, 0x9d, 0x2b, 0xc4,
	0x77, 0x45, 0x4f, 0xde, 0xc0, 0x9e, 0x62, 0xe1, 0xf5, 0xf4, 0x2b, 0xb2, 0x78, 0xa6, 0x64, 0xdf,
	0xd6, 0x61, 0x0f, 0x6b, 0x61, 0xdf, 0xb3, 0xf0, 0xfa, 0x83, 0x66, 0x04, 0x3d, 0xb5, 0xae, 0xa5,
	0x3b, 0x01, 0xd8, 0x8c, 0xc8, 0x73, 0x68, 0x17, 0x43, 0x1d, 0xa0, 0x37, 0x7e, 0xdc, 0xa0, 0x11,
	0x68, 0x42, 0xf1, 0x9b, 0x4a, 0x3f, 0xb3, 0xeb, 0xb2, 0x73, 0x5f, 0x40, 0xbb, 0x60, 0x91, 0x47,
	0x60, 0x27, 0x2c, 0xd5, 0x3a, 0xed, 0xa0, 0x28, 0x35, 0x42, 0x17, 0x9a, 0x5e, 0x20, 0x74, 0xe1,
	0x1e, 0xc1, 0xe1, 0xbd, 0xbd, 0x9b, 0x3f, 0x65, 0xfc, 0x63, 0x07, 0xec, 0x89, 0x8c, 0x09, 0xc2,
	0xfe, 0xfd, 0x7b, 0x7b, 0x56, 0x0b, 0xd6, 0x74, 0x42, 0x83, 0x97, 0xff, 0x40, 0x32, 0x76, 0xa5,
	0x4d, 0xfd, 0xc8, 0x1a, 0x6d, 0x6a, 0xa4, 0x66, 0x9b, 0x07, 0x4e, 0x8d, 0x7c, 0x82, 0xff, 0x6b,
	0x77, 0x36, 0x7c, 0xf8, 0xf3, 0x92, 0x31, 0x18, 0xfd, 0x8d, 0x61, 0xd4, 0x4f, 0xcf, 0x7f, 0x2e,
	0x1d, 0xeb, 0x76, 0xe9, 0x58, 0xbf, 0x97, 0x8e, 0xf5, 0x7d, 0xe5, 0xb4, 0x6e, 0x57, 0x4e, 0xeb,
	0xd7, 0xca, 0x69, 0x7d, 0xf4, 0x63, 0xa6, 0x66, 0x5f, 0x2e, 0xbd, 0x50, 0x24, 0xfe, 0x1c, 0xe3,
	0xf8, 0xe6, 0x73, 0xee, 0x4b, 0x91, 0x24, 0xc8, 0x19, 0x66, 0xfe, 0xc2, 0xdf, 0x7a, 0xfe, 0xea,
	0x66, 0x8e, 0xf2, 0x72, 0x57, 0xbf, 0xff, 0x57, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x70, 0xbb,
	0xd1, 0x0c, 0x19, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// DelegateDecisions creates an index in the store linking the validator and the delegate key
	// need to be able to query both the delegate and the validator given the other one
	DelegateDecisions(ctx context.Context, in *MsgDelegateDecisions, opts ...grpc.CallOption) (*MsgDelegateDecisionsResponse, error)
	// DecisionPrecommit stores the precommit hash indexed by validator address
	DecisionPrecommit(ctx context.Context, in *MsgDecisionPrecommit, opts ...grpc.CallOption) (*MsgDecisionPrecommitResponse, error)
	// DecisionCommit checks the precommit hash against the data, rejects the message if it doesn't match
	// then records the commitment in the store indexed by validator address
	DecisionCommit(ctx context.Context, in *MsgDecisionCommit, opts ...grpc.CallOption) (*MsgDecisionCommitResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DelegateDecisions(ctx context.Context, in *MsgDelegateDecisions, opts ...grpc.CallOption) (*MsgDelegateDecisionsResponse, error) {
	out := new(MsgDelegateDecisionsResponse)
	err := c.cc.Invoke(ctx, "/allocation.v1.Msg/DelegateDecisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DecisionPrecommit(ctx context.Context, in *MsgDecisionPrecommit, opts ...grpc.CallOption) (*MsgDecisionPrecommitResponse, error) {
	out := new(MsgDecisionPrecommitResponse)
	err := c.cc.Invoke(ctx, "/allocation.v1.Msg/DecisionPrecommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DecisionCommit(ctx context.Context, in *MsgDecisionCommit, opts ...grpc.CallOption) (*MsgDecisionCommitResponse, error) {
	out := new(MsgDecisionCommitResponse)
	err := c.cc.Invoke(ctx, "/allocation.v1.Msg/DecisionCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// DelegateDecisions creates an index in the store linking the validator and the delegate key
	// need to be able to query both the delegate and the validator given the other one
	DelegateDecisions(context.Context, *MsgDelegateDecisions) (*MsgDelegateDecisionsResponse, error)
	// DecisionPrecommit stores the precommit hash indexed by validator address
	DecisionPrecommit(context.Context, *MsgDecisionPrecommit) (*MsgDecisionPrecommitResponse, error)
	// DecisionCommit checks the precommit hash against the data, rejects the message if it doesn't match
	// then records the commitment in the store indexed by validator address
	DecisionCommit(context.Context, *MsgDecisionCommit) (*MsgDecisionCommitResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DelegateDecisions(ctx context.Context, req *MsgDelegateDecisions) (*MsgDelegateDecisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateDecisions not implemented")
}
func (*UnimplementedMsgServer) DecisionPrecommit(ctx context.Context, req *MsgDecisionPrecommit) (*MsgDecisionPrecommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecisionPrecommit not implemented")
}
func (*UnimplementedMsgServer) DecisionCommit(ctx context.Context, req *MsgDecisionCommit) (*MsgDecisionCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecisionCommit not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DelegateDecisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateDecisions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelegateDecisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.v1.Msg/DelegateDecisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelegateDecisions(ctx, req.(*MsgDelegateDecisions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DecisionPrecommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDecisionPrecommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DecisionPrecommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.v1.Msg/DecisionPrecommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DecisionPrecommit(ctx, req.(*MsgDecisionPrecommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DecisionCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDecisionCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DecisionCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.v1.Msg/DecisionCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DecisionCommit(ctx, req.(*MsgDecisionCommit))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "allocation.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelegateDecisions",
			Handler:    _Msg_DelegateDecisions_Handler,
		},
		{
			MethodName: "DecisionPrecommit",
			Handler:    _Msg_DecisionPrecommit_Handler,
		},
		{
			MethodName: "DecisionCommit",
			Handler:    _Msg_DecisionCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allocation/v1/tx.proto",
}

func (m *MsgDelegateDecisions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateDecisions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateDecisions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateDecisionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateDecisionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateDecisionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDecisionPrecommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecisionPrecommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecisionPrecommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDecisionPrecommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecisionPrecommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecisionPrecommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDecisionCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecisionCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecisionCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Decisions) > 0 {
		for iNdEx := len(m.Decisions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Decisions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Decision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Decision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Decision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TickWeights) > 0 {
		for iNdEx := len(m.TickWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TickWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FeeLevel) > 0 {
		i -= len(m.FeeLevel)
		copy(dAtA[i:], m.FeeLevel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeeLevel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CellarId) > 0 {
		i -= len(m.CellarId)
		copy(dAtA[i:], m.CellarId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CellarId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TickWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x12
	}
	if m.Tick != nil {
		{
			size, err := m.Tick.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Tick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Max != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x10
	}
	if m.Min != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Min))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDecisionCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDecisionCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDecisionCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDelegateDecisions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDelegateDecisionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDecisionPrecommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDecisionPrecommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDecisionCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Decisions) > 0 {
		for _, e := range m.Decisions {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *Decision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CellarId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeeLevel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TickWeights) > 0 {
		for _, e := range m.TickWeights {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *TickWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tick != nil {
		l = m.Tick.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *Tick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Min != 0 {
		n += 1 + sovTx(uint64(m.Min))
	}
	if m.Max != 0 {
		n += 1 + sovTx(uint64(m.Max))
	}
	return n
}

func (m *MsgDecisionCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDelegateDecisions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateDecisions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateDecisions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateDecisionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateDecisionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateDecisionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecisionPrecommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecisionPrecommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecisionPrecommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecisionPrecommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecisionPrecommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecisionPrecommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecisionCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecisionCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecisionCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decisions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decisions = append(m.Decisions, &Decision{})
			if err := m.Decisions[len(m.Decisions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Decision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Decision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Decision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellarId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TickWeights = append(m.TickWeights, &TickWeight{})
			if err := m.TickWeights[len(m.TickWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tick == nil {
				m.Tick = &Tick{}
			}
			if err := m.Tick.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDecisionCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDecisionCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDecisionCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
