package types

import (
	"bytes"
	"encoding/hex"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/crypto"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestABIEncodedRebalanceBytes(t *testing.T) {

	rebalanceBytes := Cellar{
		Id: "0x0000000000",
		TickRanges: []*TickRange{
			{-189780, -192480, 160},
			{-192480, -197880, 680},
			{-197880, -200640, 160},
		},
	}.ABIEncodedRebalanceBytes()
	rebalanceHash := crypto.Keccak256Hash(rebalanceBytes).Bytes()

	// hash from python brownie code cc @stevenj
	testHash, err := hex.DecodeString("0xd0f79d9bfeec64dbc27ccd281a20931cfadc07d87875c3289f55383e59f3ebbc"[2:])
	require.NoError(t, err)
	if !bytes.Equal(testHash, rebalanceHash) {
		t.Errorf("gold hash is not equal to generated hash:\n gold hash: %x\n test hash: %x", testHash, rebalanceHash)
	}
}

func TestABIEncodedCellarTickInfoBytes(t *testing.T) {
	tickInfoHash := ABIEncodedCellarTickInfoBytes(0)
	t.Logf("hash: %b", tickInfoHash)
}

func TestABIDecodeRebalanceCall(t *testing.T) {
	hexStr := "0x
	abij, err := abiJSON()
	require.NoError(t, err)

	// decode txInput method signature
	decodedSig, err := hex.DecodeString(hexStr[2:10])
	require.NoError(t, err)

	// recover Method from signature and ABI
	method, err := abij.MethodById(decodedSig)
	require.NoError(t, err)

	// decode txInput Payload
	decodedData, err := hex.DecodeString(hexStr[10:])
	require.NoError(t, err)

	data, err := method.Inputs.Unpack(decodedData)
	require.NoError(t, err)
	t.Logf("data: %v", data)
}

func TestABIDecodeLogicCall(t *testing.T) {
	hexStr := "0x
	abij, err := abi.JSON(strings.NewReader("submitLogicCall(address[],uint256[],uint256,uint8[],bytes32[],bytes32[],(uint256[],address[],uint256[],address[],address,bytes,uint256,bytes32,uint256))"))
	require.NoError(t, err)

	// decode txInput method signature
	decodedSig, err := hex.DecodeString(hexStr[2:10])
	require.NoError(t, err)

	// recover Method from signature and ABI
	method, err := abij.MethodById(decodedSig)
	require.NoError(t, err)

	// decode txInput Payload
	decodedData, err := hex.DecodeString(hexStr[10:])
	require.NoError(t, err)

	data, err := method.Inputs.Unpack(decodedData)
	require.NoError(t, err)
	t.Logf("data: %v", data)
}