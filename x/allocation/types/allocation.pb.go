// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: allocation/v1/allocation.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CreateCellarsProposal is a governance proposal content type
type CreateCellarsProposal struct {
	Title       string    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Cellars     []*Cellar `protobuf:"bytes,3,rep,name=cellars,proto3" json:"cellars,omitempty"`
}

func (m *CreateCellarsProposal) Reset()         { *m = CreateCellarsProposal{} }
func (m *CreateCellarsProposal) String() string { return proto.CompactTextString(m) }
func (*CreateCellarsProposal) ProtoMessage()    {}
func (*CreateCellarsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{0}
}
func (m *CreateCellarsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCellarsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCellarsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCellarsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCellarsProposal.Merge(m, src)
}
func (m *CreateCellarsProposal) XXX_Size() int {
	return m.Size()
}
func (m *CreateCellarsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCellarsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCellarsProposal proto.InternalMessageInfo

func (m *CreateCellarsProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateCellarsProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateCellarsProposal) GetCellars() []*Cellar {
	if m != nil {
		return m.Cellars
	}
	return nil
}

// Cellar is the XXX
type Cellar struct {
	CellarId string  `protobuf:"bytes,1,opt,name=cellar_id,json=cellarId,proto3" json:"cellar_id,omitempty"`
	Token0   string  `protobuf:"bytes,2,opt,name=token0,proto3" json:"token0,omitempty"`
	Token1   string  `protobuf:"bytes,3,opt,name=token1,proto3" json:"token1,omitempty"`
	Pool     []*Pool `protobuf:"bytes,4,rep,name=pool,proto3" json:"pool,omitempty"`
}

func (m *Cellar) Reset()         { *m = Cellar{} }
func (m *Cellar) String() string { return proto.CompactTextString(m) }
func (*Cellar) ProtoMessage()    {}
func (*Cellar) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{1}
}
func (m *Cellar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cellar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cellar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cellar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cellar.Merge(m, src)
}
func (m *Cellar) XXX_Size() int {
	return m.Size()
}
func (m *Cellar) XXX_DiscardUnknown() {
	xxx_messageInfo_Cellar.DiscardUnknown(m)
}

var xxx_messageInfo_Cellar proto.InternalMessageInfo

func (m *Cellar) GetCellarId() string {
	if m != nil {
		return m.CellarId
	}
	return ""
}

func (m *Cellar) GetToken0() string {
	if m != nil {
		return m.Token0
	}
	return ""
}

func (m *Cellar) GetToken1() string {
	if m != nil {
		return m.Token1
	}
	return ""
}

func (m *Cellar) GetPool() []*Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

// Pool is the XXX
type Pool struct {
	FeeLevel   string  `protobuf:"bytes,1,opt,name=fee_level,json=feeLevel,proto3" json:"fee_level,omitempty"`
	TickRanges []*Tick `protobuf:"bytes,2,rep,name=tick_ranges,json=tickRanges,proto3" json:"tick_ranges,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{2}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetFeeLevel() string {
	if m != nil {
		return m.FeeLevel
	}
	return ""
}

func (m *Pool) GetTickRanges() []*Tick {
	if m != nil {
		return m.TickRanges
	}
	return nil
}

// RemoveCellarsProposal is the XXX
type RemoveCellarsProposal struct {
	Title       string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CellarIds   []string `protobuf:"bytes,3,rep,name=cellar_ids,json=cellarIds,proto3" json:"cellar_ids,omitempty"`
}

func (m *RemoveCellarsProposal) Reset()         { *m = RemoveCellarsProposal{} }
func (m *RemoveCellarsProposal) String() string { return proto.CompactTextString(m) }
func (*RemoveCellarsProposal) ProtoMessage()    {}
func (*RemoveCellarsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d2c35dae4a6cad, []int{3}
}
func (m *RemoveCellarsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveCellarsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveCellarsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveCellarsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveCellarsProposal.Merge(m, src)
}
func (m *RemoveCellarsProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveCellarsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveCellarsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveCellarsProposal proto.InternalMessageInfo

func (m *RemoveCellarsProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RemoveCellarsProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RemoveCellarsProposal) GetCellarIds() []string {
	if m != nil {
		return m.CellarIds
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateCellarsProposal)(nil), "allocation.v1.CreateCellarsProposal")
	proto.RegisterType((*Cellar)(nil), "allocation.v1.Cellar")
	proto.RegisterType((*Pool)(nil), "allocation.v1.Pool")
	proto.RegisterType((*RemoveCellarsProposal)(nil), "allocation.v1.RemoveCellarsProposal")
}

func init() { proto.RegisterFile("allocation/v1/allocation.proto", fileDescriptor_23d2c35dae4a6cad) }

var fileDescriptor_23d2c35dae4a6cad = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x4e, 0xea, 0x40,
	0x18, 0x85, 0x29, 0x70, 0xb9, 0xb7, 0x3f, 0xb9, 0x9b, 0xb9, 0x17, 0xd2, 0x68, 0x6c, 0x48, 0x37,
	0xb2, 0xea, 0x58, 0xf5, 0x09, 0x64, 0x45, 0xe2, 0x82, 0x34, 0x6e, 0x74, 0x43, 0x4a, 0xf9, 0xa9,
	0x23, 0xd3, 0x4e, 0xd3, 0x19, 0x1b, 0xd8, 0x18, 0x1f, 0xc1, 0xc7, 0x72, 0xc9, 0xd2, 0xa5, 0x81,
	0x17, 0x31, 0xed, 0x00, 0x16, 0xe3, 0xd2, 0xe5, 0xf9, 0xe6, 0xe4, 0x3f, 0x27, 0x27, 0x03, 0x76,
	0xc0, 0xb9, 0x08, 0x03, 0xc5, 0x44, 0x42, 0x73, 0x8f, 0x7e, 0x2a, 0x37, 0xcd, 0x84, 0x12, 0xe4,
	0x6f, 0x85, 0xe4, 0xde, 0x51, 0xf7, 0xd0, 0xae, 0x16, 0xda, 0xe6, 0x3c, 0x1b, 0xd0, 0x19, 0x64,
	0x18, 0x28, 0x1c, 0x20, 0xe7, 0x41, 0x26, 0x47, 0x99, 0x48, 0x85, 0x0c, 0x38, 0xf9, 0x0f, 0xbf,
	0x14, 0x53, 0x1c, 0x2d, 0xa3, 0x67, 0xf4, 0x4d, 0x5f, 0x0b, 0xd2, 0x83, 0xf6, 0x14, 0x65, 0x98,
	0xb1, 0xb4, 0x38, 0x65, 0xd5, 0xcb, 0xb7, 0x2a, 0x22, 0x14, 0x7e, 0x87, 0xfa, 0x94, 0xd5, 0xe8,
	0x35, 0xfa, 0xed, 0xf3, 0x8e, 0x7b, 0x50, 0xc5, 0xd5, 0x41, 0xfe, 0xce, 0xe5, 0x3c, 0x41, 0x4b,
	0x23, 0x72, 0x0c, 0xa6, 0x86, 0x63, 0x36, 0xdd, 0xc6, 0xfe, 0xd1, 0x60, 0x38, 0x25, 0x5d, 0x68,
	0x29, 0x31, 0xc7, 0xe4, 0x6c, 0x1b, 0xba, 0x55, 0x7b, 0xee, 0x59, 0x8d, 0x0a, 0xf7, 0xc8, 0x29,
	0x34, 0x53, 0x21, 0xb8, 0xd5, 0x2c, 0x4b, 0xfc, 0xfb, 0x52, 0x62, 0x24, 0x04, 0xf7, 0x4b, 0x83,
	0x73, 0x0b, 0xcd, 0x42, 0x15, 0xe9, 0x33, 0xc4, 0x31, 0xc7, 0x1c, 0xf9, 0x2e, 0x7d, 0x86, 0x78,
	0x5d, 0x68, 0x72, 0x09, 0x6d, 0xc5, 0xc2, 0xf9, 0x38, 0x0b, 0x92, 0x08, 0xa5, 0x55, 0xff, 0xf6,
	0xe8, 0x0d, 0x0b, 0xe7, 0x3e, 0x14, 0x3e, 0xbf, 0xb4, 0x39, 0x09, 0x74, 0x7c, 0x8c, 0x45, 0xfe,
	0x63, 0xe3, 0x9e, 0x00, 0xec, 0x17, 0xd2, 0xfb, 0x9a, 0xbe, 0xb9, 0x9b, 0x48, 0x5e, 0x0d, 0x5f,
	0xd7, 0xb6, 0xb1, 0x5a, 0xdb, 0xc6, 0xfb, 0xda, 0x36, 0x5e, 0x36, 0x76, 0x6d, 0xb5, 0xb1, 0x6b,
	0x6f, 0x1b, 0xbb, 0x76, 0x47, 0x23, 0xa6, 0xee, 0x1f, 0x27, 0x6e, 0x28, 0x62, 0x9a, 0x62, 0x14,
	0x2d, 0x1f, 0x72, 0x2a, 0x45, 0x1c, 0x23, 0x67, 0x98, 0xd1, 0x45, 0xe5, 0xff, 0x50, 0xb5, 0x4c,
	0x51, 0x4e, 0x5a, 0xe5, 0xff, 0xb8, 0xf8, 0x08, 0x00, 0x00, 0xff, 0xff, 0x42, 0xfc, 0x30, 0x9c,
	0x68, 0x02, 0x00, 0x00,
}

func (m *CreateCellarsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCellarsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCellarsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cellars) > 0 {
		for iNdEx := len(m.Cellars) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cellars[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAllocation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cellar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cellar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cellar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pool) > 0 {
		for iNdEx := len(m.Pool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAllocation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Token1) > 0 {
		i -= len(m.Token1)
		copy(dAtA[i:], m.Token1)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.Token1)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token0) > 0 {
		i -= len(m.Token0)
		copy(dAtA[i:], m.Token0)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.Token0)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CellarId) > 0 {
		i -= len(m.CellarId)
		copy(dAtA[i:], m.CellarId)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.CellarId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TickRanges) > 0 {
		for iNdEx := len(m.TickRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TickRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAllocation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FeeLevel) > 0 {
		i -= len(m.FeeLevel)
		copy(dAtA[i:], m.FeeLevel)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.FeeLevel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveCellarsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveCellarsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveCellarsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CellarIds) > 0 {
		for iNdEx := len(m.CellarIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CellarIds[iNdEx])
			copy(dAtA[i:], m.CellarIds[iNdEx])
			i = encodeVarintAllocation(dAtA, i, uint64(len(m.CellarIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAllocation(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAllocation(dAtA []byte, offset int, v uint64) int {
	offset -= sovAllocation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateCellarsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	if len(m.Cellars) > 0 {
		for _, e := range m.Cellars {
			l = e.Size()
			n += 1 + l + sovAllocation(uint64(l))
		}
	}
	return n
}

func (m *Cellar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CellarId)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	l = len(m.Token0)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	l = len(m.Token1)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	if len(m.Pool) > 0 {
		for _, e := range m.Pool {
			l = e.Size()
			n += 1 + l + sovAllocation(uint64(l))
		}
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeeLevel)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	if len(m.TickRanges) > 0 {
		for _, e := range m.TickRanges {
			l = e.Size()
			n += 1 + l + sovAllocation(uint64(l))
		}
	}
	return n
}

func (m *RemoveCellarsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAllocation(uint64(l))
	}
	if len(m.CellarIds) > 0 {
		for _, s := range m.CellarIds {
			l = len(s)
			n += 1 + l + sovAllocation(uint64(l))
		}
	}
	return n
}

func sovAllocation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAllocation(x uint64) (n int) {
	return sovAllocation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateCellarsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCellarsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCellarsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cellars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cellars = append(m.Cellars, &Cellar{})
			if err := m.Cellars[len(m.Cellars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cellar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cellar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cellar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellarId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = append(m.Pool, &Pool{})
			if err := m.Pool[len(m.Pool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TickRanges = append(m.TickRanges, &Tick{})
			if err := m.TickRanges[len(m.TickRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveCellarsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveCellarsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveCellarsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellarIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellarIds = append(m.CellarIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAllocation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAllocation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAllocation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAllocation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAllocation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAllocation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAllocation = fmt.Errorf("proto: unexpected end of group")
)
